[
  {
    "objectID": "sharing.html#github-code-sharing",
    "href": "sharing.html#github-code-sharing",
    "title": "Sharing",
    "section": "GitHub Code Sharing",
    "text": "GitHub Code Sharing\nAll the code that I wrote, and in many cases co-wrote with Claude.AI and/or Perplexity.AI, is available in my GitHub repositories, in the following ways.\n\nconcertData R-package\nhttps://github.com/vanleeuwen-hans/concertData\nThis is my concertData R-package where I organized the functions I wrote to perform all the data processing, analytics and visualization as part of my Capstone Project for the Google Data analytics Certification.\n\n\nconcertData Documentation\nhttps://vanleeuwen-hans.github.io/concertData/index.html\nWith pkgdown I was able to easily create documentation web pages for my concertData R-package.\n# install and load library\ninstall.packages(\"pkgdown\")\nlibrary(pkgdown)\n\n# In the package directory, run:\nusethis::use_pkgdown()\n# This will create a _pkgdown.yml configuration file and add necessary entries to .gitignore\n\n# To build the site locally in R-Studio, use:\npkgdown::build_site()\n# This will create a docs/ directory with your website files\n\n# Automate deployment with GitHub Pages\nusethis::use_pkgdown_github_pages()\n# This sets up GitHub Actions to automatically build and deploy your site whenever you push changes to your repository\nThe resulting website includes:\n\nA homepage based on your README.md\nReference pages for all exported functions\n\nThe changes can then be committed and pushed to GitHub from R-Studio.\n\n\nCode Chunks in the Quarto Report\nI used Quarto to publish my Capstone Project report for the Google Data analytics Certification, containing my methods, analysis code chunks, results including plots, insights and lessons learned. More about the set-up in the next paragraph. Example R Code chunks with my analysis code and outputs can be seen at my U2 Data Analytics Quarto web site.",
    "crumbs": [
      "Home",
      "Conclusions and Sharing",
      "10. Sharing"
    ]
  },
  {
    "objectID": "sharing.html#quarto-report-on-github-pages",
    "href": "sharing.html#quarto-report-on-github-pages",
    "title": "Sharing",
    "section": "Quarto Report on GitHub Pages",
    "text": "Quarto Report on GitHub Pages\n\nIntroduction\nTo write my report for the Google Data Analytics Certification Capstone Project I first experimented with basic R Markdown pages, but then switched to Quarto which was easy having a report with multiple pages, and it is convenient to share and publish it on GitHub Pages. Basically, the Quarto Report that you are reading now was created as I advanced in my project, and includes all the analysis steps. The report pages are automatically rendered at which point the analysis code is executed and the resulting output, tables or plots are included in the report page. The structure of the report is created in the _quarto.yml file in the R Studio project folder, and then the individual Quarto documents with the sections of the report are automatically linked into one web site.\n\n\nSetting up the Quarto website\nThe initial push of my rendered Quarto documents to my GitHub repository and GitHub Pages was a challenge as there were many files, including images, and the total size made the process fail. Here is how I set it up:\nIn my GitHub account I created a new repository: u2_data_analytics, with nothing in it. In the Settings &gt; Pages section I selected to deploy from the gh-pages branch (see below) and from the docs folder. That is the Folder where Quarto renders and creates the website files.\nLocally, in the folder of my R Studio project u2_data_analytics, I worked on the MacOS terminal:\n# initialise git repository locally\n% git init \nInitialized empty Git repository in u2_data_analytics/.git/\n\n# link it to the online GitHuB repository\n% git remote add origin https://github.com/vanleeuwen-hans/u2_data_analytics.git\n\n# pull from remote main branch\n% git pull origin main \nFrom https://github.com/vanleeuwen-hans/u2_data_analytics \n* branch main -&gt; FETCH_HEAD\n\n# create gh-pages branch that will be used for publishing Quarto Report pages only\n% git checkout -b gh-pages \nSwitched to a new branch 'gh-pages'\n\n# Push the new branch to remote\n\n% git push origin gh-pages \nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0 remote: \nremote: Create a pull request for 'gh-pages' on GitHub by visiting: remote: https://github.com/vanleeuwen-hans/u2_data_analytics/pull/new/gh-pages remote: \nTo https://github.com/vanleeuwen-hans/u2_data_analytics.git \\* \\[new branch\\] gh-pages -\\&gt; gh-pages\n\n# Set upstream to track remote branch\n# Pushes your local gh-pages branch to the remote repository (origin) \n# 2 Sets up tracking between your local and remote branch, which means: \n# ◦ Future git pull commands will know to pull from origin/gh-pages \n# ◦ Future git push commands will know to push to origin/gh-pages \n# ◦ You can see the branch's status compared to remote with git status \n# Without setting the upstream, you'd need to type git push origin gh-pages every time. \n# After setting it, you can simply type git push or git pull. \n% git push --set-upstream origin gh-pages \nbranch 'gh-pages' set up to track 'origin/gh-pages'. Everything up-to-date\n\n# check status\n% git status On branch gh-pages \nYour branch is up to date with 'origin/gh-pages'. \nUntracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) … \nnothing added to commit but untracked files present (use \"git add\" to track)\n\n# add content from docs folder, but not all at once\n# as that will be too big and result in failure\n% git add docs/index.html \n% git commit -m \"Adding Quarto pages in batches\" \n[gh-pages e8e6ad6] Adding Quarto pages in batches 1 file changed, \n8 insertions(+) create mode 100644 docs/index.html \n\n% git push \nEnumerating objects: 5, done. Counting objects: 100% (5/5), done. \nDelta compression using up to 4 threads \nCompressing objects: 100% (3/3), done. \nWriting objects: 100% (4/4), 490 bytes \\| 6.00 KiB/s, done. \nTotal 4 (delta 0), reused 0 (delta 0), pack-reused 0 To https://github.com/vanleeuwen-hans/u2_data_analytics.git \ne4ce103..e8e6ad6 gh-pages -&gt; gh-pages\n\n# continue adding, committing and pushing in small batches\n# until there are no untracked files left\n...\nAt some point I also discovered a way to increase the buffer size to allow bigger pushes to Github:\ngit config --global http.postBuffer 524288000\n\n\nMaintenance and Updates\nThe setup is to have two branches in the u2_data_analytics repository: * main: where project files arae manged - not needed for the published web site * gh-pages:documents needed for the published web site - the result of Quarto render\nOn my local system I will for example work in the R Studio project u2_data_analytics while in the main branch, i.e. before starting up R Studio I use this in the terminal while in the project folder:\ngit checkout main\nI then update the qmd report files in R Studio, with new analyses or changes in the code chunks or text. Once I am happy with the changes I render the pages with quarto render:\nquarto render\nThis creates the files in the docs folder (in the main branch).\nHowever, the docs folder is git managed in the other branch (gh-pages), so I then switch to the gh-pages branch:\ngit checkout gh-pages\nand then copy the newly created docs files from the main branch into the gh-pages branch with:\ngit checkout main -- docs/\nAfterwards I do the usual add and commit, followed by a push to the remote\ngit add docs/*\ngit commit -m \"Update rendered documents from main\"\ngit push origin gh-pages\nwhich will make the new versions of the rendered HTML pages available on my Quarto website on GitHub Pages.",
    "crumbs": [
      "Home",
      "Conclusions and Sharing",
      "10. Sharing"
    ]
  },
  {
    "objectID": "sharing.html#shiny-apps",
    "href": "sharing.html#shiny-apps",
    "title": "Sharing",
    "section": "Shiny Apps",
    "text": "Shiny Apps\nThe Shiny Apps with interactive visualizations of U2 data that I developed in my project are hosted at: https://www.shinyapps.io/. These tools cannot be simply embedded in a static website like my U2 Data Analytics Quarto web site. The code for these Shiny Apps are managed in R Studio on my Mac, with connections to GitHub and shinyapps.io to facilitate code version management and easy deployment. See more info at: Interactive Visualizations.",
    "crumbs": [
      "Home",
      "Conclusions and Sharing",
      "10. Sharing"
    ]
  }
]