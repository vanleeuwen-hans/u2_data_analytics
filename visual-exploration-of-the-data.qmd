---
title: "Visual Exploration"
author: "Hans van Leeuwen"
bibliography: references.bib
---

Going beyond the basic statistics and comparison with the u2gigs.com statistics, I explored the data in a more visual manner.

## Load custom concertData package

First we load my custom concertData package where I organized all the functions to analyze the U2 concert data. This R package is available on my GitHub page at: https://github.com/vanleeuwen-hans.

```{r load custom concertData package, message = FALSE, warning = FALSE}
devtools::load_all("../packages/concertData")
library(concertData)
```

Load the u2data file.

```{r visual exploration - load libraries, message = FALSE, warning = FALSE}

# read the u2 concertData
u2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')
```

## U2 shows throughout the week

Let's see what days of the week the members of U2 prefer to play their shows. Saturday and Friday are the ones.

```{r visual exploration - week days, message=FALSE, warning=FALSE, out.width="100%" }

# get weekday counts
weekday_count <- count_shows_by_weekday(u2data)

# Extract the weekdays into a vector
weekdays <- as.character(weekday_count$weekday)

# plot data
library(ggplot2)
ggplot(data=weekday_count, aes(x=weekday, y=count)) +
  geom_bar(stat="identity", fill="steelblue")+
  geom_text(aes(label=count), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)+
  scale_x_discrete(limits = weekdays)+
  ggtitle("U2 shows throughout the week")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Day of the week") + ylab("Number of shows")

# check that weekday counts of shows counts match the number of unique shows in the data
print(sum(weekday_count$count))
print(nrow(unique(u2data[,c('showID')])))
```

## U2 shows throughout the year

Let's see what months of the year the members of U2 prefer to play their shows. The Top 3 months are November, October and May. January seems to be either too cold, or after the holiday season some start-up time is needed. In August they tend the take a well-deserved vacation.

```{r visual exploration - months, message=FALSE, warning=FALSE, out.width="100%" }

# get monthly counts
month_counts <- count_shows_by_month(u2data)

# Extract the months into a vector
months <- as.character(month_counts$month)

# plot number of shows by month
ggplot(data=month_counts, aes(x=month, y=count)) +
  geom_bar(stat="identity", fill="steelblue")+
  geom_text(aes(label=count), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)+
  scale_x_discrete(limits = months)+
  ggtitle("U2 shows throughout the year")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Month") + ylab("Number of shows")

# check that month counts of shows counts match the number of unique shows in the data
print(sum(month_counts$count))
print(nrow(unique(u2data[,c('showID')])))
```

## U2 shows over the decades

The 80s was definitely the decade where U2 was most active with regards to touring!

```{r visual exploration - decades, message=FALSE, warning=FALSE, out.width="100%" }

# get decade counts
decade_counts <- count_shows_by_decade(u2data)

# Extract the decades into a vector
decades <- as.character(decade_counts$decade)

# plot number of shows by decade
ggplot(data=decade_counts, aes(x=decade, y=count)) +
  geom_bar(stat="identity", fill="steelblue")+
  geom_text(aes(label=count), vjust=1.6, color="white", position = position_dodge(0.9), size=3.5)+
  scale_x_discrete(limits = decades)+
  ggtitle("U2 shows over the decades")+
  theme(plot.title = element_text(hjust = 0.5))+
  xlab("Decade") + ylab("Number of shows")

# check that decade counts of shows counts match the number of unique shows in the data
print(sum(decade_counts$count))
print(nrow(unique(u2data[,c('showID')])))
```

## Opening and Closing songs

Zoo Station and 40 win by far as opening and closing songs, respectively. Interesting anecdote, when I asked my wife what was the top opening song she was convinced it was Vertigo as she remembered that almost all Vertigo Tour shows opened with that song. When we inspected the different legs of that tour we saw that it was not Vertigo but City of Blinding Lights that mostly opened. Of course, the memory is biased towards the shows that we attended. That's why it was good to have the data at hand to show the overall picture. Note: snippets were excluded from this analysis.

The first table below shows the top 3 opening songs for each tour, while the second table below shows the top opening song all time, for each year since 1976. Note that in some of these years there were no tours but a perhaps a few small shows or TV appearances. To come back to the Vertigo example, in that second table you can see that City of Blinding Lights opened 86 shows of the Vertigo Tour while Vertigo opened 36 shows.

```{r data analysis - opening and closing songs, message=FALSE, warning=FALSE, out.width="100%" }

# load libraries
library(ggplot2)

# Get top 10 opening songs 
opening_songs <- find_most_played_opening_songs(u2data, n = 10)

# Visualize opening songs
ggplot(opening_songs, aes(x = reorder(song_title, times_played), y = times_played)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Most Common U2 Opening Songs",
       x = "Song",
       y = "Number of Times Used as Opener") +
  theme(axis.text.y = element_text(size = 10))

# Get top 10 closing songs
closing_songs <- find_most_played_closing_songs(u2data, n = 10)

# Visualize closing songs
ggplot(closing_songs, aes(x = reorder(song_title, times_played), y = times_played)) +
  geom_bar(stat = "identity", fill = "indianred") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Most Common U2 Closing Songs",
       x = "Song",
       y = "Number of Times Used as Closer") +
  theme(axis.text.y = element_text(size = 10))

# Get top 3 opening songs per tour 
top_3_openers_by_tour <- find_most_played_opening_songs_by_tour(u2data, top_n = 3)
# Print results
head(top_3_openers_by_tour, n = nrow(top_3_openers_by_tour))

# get top opening song by year
opening_timeline <- find_most_played_opening_song_by_year(u2data)
head(opening_timeline, n = nrow(opening_timeline))


```

## Set-list variability across tours

Here are two examples of a U2 set-list, from the Innocence + Experience Tour (2015) and the Joshua Tree Tour (2017), both in Amsterdam. These set-lists are actually used by the band during the show and the crew members give them to the fans after the show, sometimes.\
![U2 Innocence + Experience Tour, 9 September 2015, Amsterdam](u2hvl/IMG_3851.JPG "U2 Innocence + Experience Tour, 9 September 2015, Amsterdam"){width="300"}![U2 Joshua Tree Tour 2017, 30 July 2017, Amsterdam](u2hvl/20170730_231317.jpg "U2 Joshua Tree Tour 2017, 30 July 2017, Amsterdam"){width="295"}

### Data preparation for set-list variability analysis

Now we get to one of the main objectives of this project: how variable, or fixed, are the U2 set-lists? Let's start with data preparation and calculations before we create several plots.

```{r data analysis - setlist variability - prepare the data, message=FALSE, warning=FALSE, error=FALSE}

# read the u2 concertData
u2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')

# List of tours to exclude as this analysis focuses on the regular tours done after a U2 album release.
excluded_tours <- c(
   "U2 Stories of Surrender Tour",
   "U2 Songs Of Experience Promo Tour",
   "U2 Songs Of Innocence Promo Tour",
   "U2 No Line On The Horizon Promo Tour",
   "U2 How To Dismantle An Atomic Bomb Promo Tour",
   "U2 All That You Can't Leave Behind Promo Tour",
   "U2 Conspiracy Of Hope",
   "U2 11 O'Clock Tick Tock Tour",
   "U2 Early Days",
   "U2 Various Dates"
)

```

### Average number of songs per show

In the early days the U2 concerts were much shorter, for example after the launch of their first album 'Boy' the average numbers of songs played at their concerts was about 10. In more recent tours the number is somewhere between 22 and 25. As mentioned on the [Basic Statistics U2 Concerts page](basic-stats-u2-concerts.qmd#longest-set-lists), I was lucky to have attended of the longest shows ever: 27 songs played.

```{r data analysis - setlist variability - number of songs per show, message=FALSE, warning=FALSE, error=FALSE}

# get required package
library(ggplot2)

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)
  
# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Average Songs per Show
ggplot(tour_stats, aes(x = tour, y = avg_songs_per_show)) +
  geom_col(fill = "blue") +
  geom_text(aes(label = round(avg_songs_per_show, 1)), 
            vjust = 2, size = 3) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Average Number of Songs per Show",
       x = "Tour",
       y = "Average Number of Songs")

```

### Number of shows per tour

The longest tour with most shows ever was the ZOO TV Tour in 1992-1993. That tour consisted of 5 legs and a total of 156 shows. That was the first tour when I saw U2 live, below a picture I took at the front rail in Nijmegen on August 3, 1993.

![U2 ZOO TV - Zooropa Tour, 3 Aug 1993, Nijmegen, The Netherlands](u2hvl/F694A384-BA53-4A39-B0B6-887121947E84.JPG "U2 ZOO TV - Zooropa Tour, 3 Aug 1993, Nijmegen, The Netherlands"){fig-align="left" width="527"}

If you want to see a visual of the number of shows per tour aspect, layered on the world map, you can check out the [U2 Tour Map](interactive-visual-apps.qmd#world-map-with-interactive-tour-and-song-filter-using-shiny) Shiny app that I developed as part of this project.

```{r data analysis - setlist variability - number of shows per tour, message=FALSE, warning=FALSE, error=FALSE}

# get required package
library(ggplot2)

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Number of Shows per Tour
ggplot(tour_stats, aes(x = tour, y = total_shows)) +
  geom_col(fill = "red") +
  geom_text(aes(label = total_shows), 
            vjust = 2, size = 3) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Number of Shows per Tour",
       x = "Tour",
       y = "Number of Shows")
```

### Number of unique songs per tour

The more unique songs U2 plays during a tour the better for the fans who go to many shows. Like this we hope to hear the songs they do not play that often. For example, when we were in Honolulu, Hawaii, for the last show of the Vertigo Tour, they played 'Rockin' in the Free World', together with Pearl Jam. That was a big party, or as Bono said: *'A tribal gathering of the faithful, celebrity love island, beach party'* 😁 🏖️ See my [summary/compilation video](https://www.youtube.com/watch?v=64eC8sRPlMA) on YouTube.

![U2 Vertigo Tour, December 9, 2006, Honolulu](u2hvl/DSCN1518.JPG "U2 Vertigo Tour, December 9, 2006, Honolulu"){fig-align="left" width="534"}

If we look at the graph we see that the 360° Tour had most unique songs played. There seems to be a correlation with the number of shows in the tour, but more about that further down.

```{r data analysis - setlist variability - number of songs per tour, message=FALSE, warning=FALSE, error=FALSE}

# get required package
library(ggplot2)

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Unique Songs per Tour
ggplot(tour_stats, aes(x = tour, y = total_unique_songs)) +
  geom_col(fill = "purple") +
  geom_text(aes(label = total_unique_songs), 
            vjust = 2, size = 3) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Number Unique Songs per Tour",
       x = "Tour",
       y = "Number of Unique Songs")
```

### Number of unique snippets per tour

Snippets are short pieces of songs that are mixed into a regular song performance. These snippets can be from U2 songs or from any other artist. A well-know and loved snippet among U2 fans is 'Shine like stars' which is sometimes played at the end of 'With or without You", for example here in [this Joshua Tree concert in 1987](https://youtu.be/IUiOIG-n1vc?feature=shared&t=365). In the graph we see that the 360° Tour did not only have the most number of unique songs, but also the most number of unique snippets.

```{r data analysis - setlist variability - number of snippets per tour, message=FALSE, warning=FALSE, error=FALSE}

# get required package
library(ggplot2)

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Unique Snippets per Tour
ggplot(tour_stats, aes(x = tour, y = total_unique_snippets)) +
  geom_col(fill = "orange") +
  geom_text(aes(label = total_unique_snippets), 
            vjust = 2, size = 3) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Number of Unique Snippets per Tour",
       x = "Tour",
       y = "Number of Unique Snippets")
```

### Correlation between number of shows and number of songs/snippets

In the correlation plot below we see a moderate positive correlation between the number shows played during a tour and the number of unique songs and snippets played during a tour. About 21% (0.462² = 0.213) of the variation in unique songs can be explained by the number of shows, and about 16% (0.398² = 0.158) of the variation in unique snippets can be explained by the number of shows. Thus, there is a pattern, but it's not very strong - having more shows somewhat predicts having more unique songs and more unique snippets performed.

```{r data analysis - setlist variability - correlation sows - songs/snippets, message=FALSE, warning=FALSE, error=FALSE}

# get required packages
library(ggplot2)

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Analyze correlation between number of shows and unique songs / snippets
tour_correlation_data <- calculate_tour_correlation_data(tour_stats)

# Calculate correlations
correlations <- summarise(
  tour_stats,
  songs_correlation = cor(total_shows, total_unique_songs),
  snippets_correlation = cor(total_shows, total_unique_snippets)
)

# Create plot
ggplot(tour_correlation_data, 
       aes(x = total_shows, y = unique_count)) +
  geom_point(aes(color = tour), size = 3) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  facet_wrap(~ metric_type, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Correlation: Number of Shows vs Unique Songs/Snippets",
    x = "Number of Shows",
    y = "Number of Unique Songs/Snippets"
  ) +
  theme(legend.position = "right") +
  geom_text(data = data.frame(
    metric_type = "Unique Songs",
    x = Inf,
    y = Inf,
    label = sprintf("Correlation: %.3f", correlations$songs_correlation)
  ), aes(x = x, y = y, label = label),
  hjust = 1, vjust = 1, size = 3, inherit.aes = FALSE) +
  geom_text(data = data.frame(
    metric_type = "Unique Snippets",
    x = Inf,
    y = Inf,
    label = sprintf("Correlation: %.3f", correlations$snippets_correlation)
  ), aes(x = x, y = y, label = label),
  hjust = 1, vjust = 1, size = 3, inherit.aes = FALSE)
```

### Distribution of song frequencies by tour

The plot below gives a visual indication of how often songs are played within a tour.

```{r data analysis - setlist variability - distribution song frequencies, message=FALSE, warning=FALSE, error=FALSE}

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)
# remove snippets
data_no_snippets <- concertData_remove_snippets(data_inc_snippets)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Calculate song frequency across tours
song_frequency <- calculate_song_frequency_across_tours(data_no_snippets, tour_stats, tour_order)


# Song Frequency Distribution
ggplot(song_frequency, aes(x = song_frequency, y = tour)) +
  geom_boxplot(outlier.shape = NA, fill = "lightgrey") +
  geom_jitter(aes(color = tour), height = 0.2, alpha = 0.4) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.y = element_text(size = 8)
  ) +
  labs(title = "Distribution of Song Frequencies by Tour",
       subtitle = "How often are different songs played within each tour?",
       caption = "Box shows 25th-75th percentiles, bold line is median\nPoints show individual songs, shifted left/right by frequency\nWider spread indicates more variation in how often songs are played",
       x = "Song Frequency (Proportion of shows that a song is played)",
       y = "Tour")
```

### Overall set-list variability by tour

In this analysis one overall variability score was calculated for each tour based on the variability of the set-lists in all the shows of that tour. The values were normalized with the tour having the highest set-list variability getting a score of 1.0. As we can see that is the 360° Tour, which also had the highest number of unique songs and snippets played. The Joshua Tree Tour 2017-2019 scored the lowest. This can partly be explained by the fact that U2 started playing those shows by playing the full Joshua Tree album with the songs always in the order as on the original album.

```{r data analysis - overall variability - distribution song frequencies, message=FALSE, warning=FALSE, error=FALSE}

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)
# remove snippets
data_no_snippets <- concertData_remove_snippets(data_inc_snippets)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Create a normalized version of overall_variability (0-1 scale)
# and add to tour_stats data in new data frame
max_overall_var <- max(tour_stats$overall_variability)
tour_stats_extended <- mutate(tour_stats, 
                               normalized_variability = overall_variability / max_overall_var)

# plot overall variability of tours, with normalized values
ggplot(tour_stats_extended, aes(x = tour)) +
  # Bar for normalized variability
  geom_col(aes(y = normalized_variability), fill = "darkgreen", alpha = 0.5) +
  # Bar outline for actual variability
  geom_col(aes(y = overall_variability / max_overall_var), fill = NA) +
  # Add labels for both actual and normalized values
  geom_text(aes(y = normalized_variability,
                label = sprintf("%.2f", normalized_variability)),
            vjust = 2, size = 3) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Overall Setlist Variability by Tour",
       subtitle = "Higher values mean more variability in the setlists of that tour",
       x = "Tour",
       y = "Variability Score") +
  coord_cartesian(ylim = c(0, 1.1))  # Set y-axis limit with some padding for labels
```

### Set-list variability heatmap

Besides the overall variability score by tour, we can see in the analysis and plot below the variability across the set-list song positions within a tour. Here we can indeed see the block of conserved songs at the start of the Joshua Tree Tour 2017-2019 shows. But we see similar conserved blocks in other tours, for example the ZOO TV Tour, Innocence + Experience Tour, and the latest U2:UV Achtung Baby Live shows in the Sphere, Las Vegas.

This plot gives a very nice picture of the set-list variability within and across tours, a topic very often discussed by U2 fans as I mentioned on the [Asking the Right Questions](ask-the-right-questions.qmd) page of this report. Now with the data in hand and this visualization it is possible to have a more objective view.

```{r data analysis - setlist variability - overall set-list variability, message=FALSE, warning=FALSE, error=FALSE}

# create data frame without excluded tours
data_selected_tours <- concertData_remove_tours(u2data, excluded_tours)
# remove shows without setlist
data_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)
# remove snippets
data_no_snippets <- concertData_remove_snippets(data_inc_snippets)

# Get tours ordered chronologically
tour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)

# Calculate tour-level statistics
tour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)

# Create a normalized version of overall_variability (0-1 scale)
# and add to tour_stats data in new data frame
max_overall_var <- max(tour_stats$overall_variability)
tour_stats_extended <- mutate(tour_stats, 
                               normalized_variability = overall_variability / max_overall_var)

# Calculate max songs for each tour
max_songs_by_tour <- longest_setlist_by_tour(data_no_snippets)
  
# Analyze Song Positions in Setlists
position_analysis <- analyze_song_positions(data_no_snippets, max_songs_by_tour, tour_order)

# plot graph
ggplot() +
  geom_tile(data = position_analysis,
            aes(x = position_bin, y = tour, fill = variability)) +
  geom_text(data = tour_stats_extended,
            aes(x = max(position_analysis$position_bin),
                y = tour, 
                label = sprintf("%.2f", normalized_variability)),
            size = 2,
            color = "black",
            hjust = -0.2) +
  scale_fill_gradient(low = "red", high = "blue") +
  scale_x_continuous(
    breaks = seq(1, max(position_analysis$position_bin), by = 2),
    labels = seq(1, max(position_analysis$position_bin), by = 2)
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 6)
  ) +
  labs(title = "Setlist Variability by Tour",
       subtitle = "How predictable is each song position across different shows?",
       caption = paste("Colors indicate variability: Red = highly predictable, Blue = highly variable\n",
                      "Text annotations show normalized tour variability (unique songs / avg songs per show)"),
       x = "Song Position in Show",
       y = "Tour",
       fill = "Variability\n(0-1 scale)")
```


## World maps of U2 concerts locations

### Data pre-processing for world maps

```{r visual exploration - generate data for worldmaps, message=FALSE, warning=FALSE, error=TRUE}

# read the u2 concertData
u2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')

# get unique shows from concert data fram
unique_shows <- extract_unique_shows(u2data)
# Process unique locations
unique_locations <- get_concert_locations(unique_shows)

# Initialize geocoded_cities
geocoded_cities <- NULL
# File path for geocoded cities
geocoded_file_path <- "u2data/geocoded_cities.csv"
# Check if file with geocodes exists and read it if it does
# If file does not exist yet lookup the geocode for each location
# and write to file for future use (avoiding time consuming geocode lookup)
geocoded_cities <- geocode_cities(geocoded_file_path, unique_locations)

# Create frequency counts for cities 
city_frequency <- create_city_frequency(unique_shows, geocoded_cities)

# transform city counts and use bins
# for example cities with 1 sow, 2-5 shows, 6-10 shows, 11-25 shows,
# 26-50 shows, 51-100 shows, or cities with 100+ shows
breaks <- c(0, 1, 5, 10, 25, 50, 100, Inf)
city_frequency_transformed <- transform_city_frequency(city_frequency, breaks)

# Create decade-based frequency 
city_by_decade <- create_decade_frequency(unique_shows, geocoded_cities)

# Create validation report 
validation <- tryCatch({
  list(
    total_shows = n_distinct(u2data$showID),
    processed_shows = nrow(unique_shows),  
    unique_cities = n_distinct(u2data$city),
    unique_countries = n_distinct(u2data$country),
    unique_tours = n_distinct(u2data$tour),
    cities_with_coords = sum(!is.na(geocoded_cities$lat)),
    total_song_performances = nrow(u2data),
    shows_missing_setlist = sum(is.na(u2data$song_title)),
    total_shows_in_frequency = sum(city_frequency$show_count)  
  )
}, error = function(e) {
  stop(paste("Error creating validation report:", e$message))
})

# Print validation report with additional checks
print("Data Validation Report:")
print(validation)
# Additional validation checks
if (validation$total_shows != validation$processed_shows) {
  warning(sprintf("Mismatch in show counts: %d total vs %d processed", 
                  validation$total_shows, validation$processed_shows))
}
if (validation$total_shows != validation$total_shows_in_frequency) {
  warning(sprintf("Mismatch in frequency counts: %d total vs %d in frequency table", 
                  validation$total_shows, validation$total_shows_in_frequency))
}

```

### World map using log scale and intensity

```{r visual exploration - world map, message=FALSE, warning=FALSE, out.width="100%" }
# Using a log scale for the size/color intensity

# libraries
library(ggplot2)
library(maps)

# create map
world_map <- map_data("world")

# Create date range string for subtitle
date_range <- paste(
  format(min(city_frequency_transformed$first_show), "%B %Y"),
  "to",
  format(max(city_frequency_transformed$last_show), "%B %Y")
)

# create plot
world_map <- ggplot() +
  # Base world map
  geom_polygon(data = world_map, 
               aes(x = long, y = lat, group = group),
               fill = "lightgray", color = "white") +
  # Add points for each city
  geom_point(data = city_frequency_transformed,
             aes(x = long, y = lat, 
                 size = show_category,
                 color = show_category),
             alpha = 0.7) +
  # Customize the appearance
  scale_size_discrete(range = c(2, 8)) +
  scale_color_brewer(palette = "YlOrRd") +
  guides(
    color = guide_legend(
      title = "Number of Shows",
      override.aes = list(size = c(2, 3, 4, 5, 6, 7, 8))  # Make legend dots increase in size
    ),
    size = "none"  # Hide separate size legend
  ) +
  theme_minimal() +
  labs(title = "U2 Concert Locations Worldwide",
       subtitle = date_range,
       x = "Longitude",
       y = "Latitude") +
  theme(legend.position = "right") +
  # Adjust the map proportions
  coord_fixed(1.3)

# print plot
print(world_map)

```

### World map by decades

```{r visual exploration - world map by decades, message=FALSE, warning=FALSE, out.width="100%" }
# Create decade-based maps

# Libraries
library(ggplot2)
library(maps)
library(RColorBrewer)

# Create world map base
world_map <- map_data("world")

# Create visualization
decades_plot <- ggplot(data = city_by_decade) +
  geom_polygon(data = world_map, 
               aes(x = long, y = lat, group = group),
               fill = "lightgray", color = "white") +
  geom_point(aes(x = long, y = lat, 
                 size = show_count,
                 color = show_count),
             alpha = 0.7) +
  scale_size_continuous(name = "Number of shows",
                       range = c(2, 8)) +
  scale_color_gradientn(name = "Number of shows",
                       colors = brewer.pal(9, "YlOrRd")) + 
  facet_wrap(~decade) +
  theme_minimal() +
  labs(title = "U2 Concert Locations by Decade",
       x = "Longitude",
       y = "Latitude") +
  guides(color = guide_legend(order = 1),
         size = guide_legend(order = 1)) +
  theme(legend.position = "right",
        legend.box = "horizontal") +
  coord_fixed(1.3, 
             xlim = c(-180, 180),
             ylim = c(-60, 90))

print(decades_plot)
```

### World map with zoom and popups using leaflet

```{r visual exploration - zoomable world map, message=FALSE, warning=FALSE}

# load libraries
library(ggplot2)
library(maps)
library(leaflet)
library(dplyr)
library(viridis)

# Prepare the popup content
city_frequency_transformed <- city_frequency_transformed %>%
  mutate(
    popup_content = sprintf(
      '<div class="popup-content">
                <h3>%s, %s</h3>
                <table>
                  <tr><td><b>Shows:</b></td><td>%d</td></tr>
                  <tr><td><b>First show:</b></td><td>%s</td></tr>
                  <tr><td><b>Last show:</b></td><td>%s</td></tr>
                  <tr><td><b>Venues:</b></td><td>%s</td></tr>
                  <tr><td><b>Tours:</b></td><td>%s</td></tr>
                </table>
        </div>',
      city, country, show_count, first_show, last_show,
      sapply(venues, function(x) paste(x, collapse = ", ")),
      sapply(tours, function(x) paste(x, collapse = ", "))
    )
  )

# Create binned color scale matching the Shiny app
bins <- c(1, 3, 5, 10, 20, 50, Inf)
city_palette <- colorBin("viridis", domain = city_frequency_transformed$show_count, 
                        bins = bins, right = FALSE)

# Create interactive map
leaflet(city_frequency_transformed, width="100%") %>%
  # Add different base map options 
  addProviderTiles(providers$CartoDB.Positron, group = "Light") %>%
  addProviderTiles(providers$CartoDB.DarkMatter, group = "Dark") %>%
  addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
  
  # Set default 
  setView(lng = 0, lat = 20, zoom = 2) %>%
  
  # Add circles for cities with enhanced visibility
  addCircleMarkers(
    ~long, ~lat,
    radius = ~pmax(5, log_shows * 3),  # Matching the min radius of 5 from Shiny app
    popup = ~popup_content,
    label = ~sprintf("%s: %d shows", city, show_count),  # Matching the label format
    labelOptions = labelOptions(textsize = "12px"),
    color = ~city_palette(show_count),
    fillOpacity = 0.7,
    stroke = TRUE,
    weight = 1,
    opacity = 0.8
  ) %>%
  
  # Add layer control with Light as default
  addLayersControl(
    baseGroups = c("Light", "Dark", "Satellite"),
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  
  # Add legend 
  addLegend(
    position = "bottomright",
    pal = city_palette,
    values = ~show_count,
    title = "Number of Shows",
    opacity = 0.7,
    labFormat = labelFormat(digits = 0)
  )
```
