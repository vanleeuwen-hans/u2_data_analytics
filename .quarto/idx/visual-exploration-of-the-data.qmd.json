{"title":"Visual Exploration","markdown":{"yaml":{"title":"Visual Exploration","author":"Hans van Leeuwen","bibliography":"references.bib"},"headingText":"Load custom concertData package","containsRefs":false,"markdown":"\n\nGoing beyond the basic statistics and comparison with the u2gigs.com statistics, I explored the data in a more visual manner.\n\n\nFirst we load my custom concertData package where I organized all the functions to analyze the U2 concert data. This R package is available on my GitHub page at: https://github.com/vanleeuwen-hans.\n\n```{r load custom concertData package, message = FALSE, warning = FALSE}\ndevtools::load_all(\"../packages/concertData\")\nlibrary(concertData)\n```\n\nLoad the u2data file.\n\n```{r visual exploration - load libraries, message = FALSE, warning = FALSE}\n\n# read the u2 concertData\nu2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')\n```\n\n## U2 shows throughout the week\n\nLet's see what days of the week the members of U2 prefer to play their shows. Saturday and Friday are the ones.\n\n```{r visual exploration - week days, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# get weekday counts\nweekday_count <- count_shows_by_weekday(u2data)\n\n# Extract the weekdays into a vector\nweekdays <- as.character(weekday_count$weekday)\n\n# plot data\nlibrary(ggplot2)\nggplot(data=weekday_count, aes(x=weekday, y=count)) +\n  geom_bar(stat=\"identity\", fill=\"steelblue\")+\n  geom_text(aes(label=count), vjust=1.6, color=\"white\", position = position_dodge(0.9), size=3.5)+\n  scale_x_discrete(limits = weekdays)+\n  ggtitle(\"U2 shows throughout the week\")+\n  theme(plot.title = element_text(hjust = 0.5))+\n  xlab(\"Day of the week\") + ylab(\"Number of shows\")\n\n# check that weekday counts of shows counts match the number of unique shows in the data\nprint(sum(weekday_count$count))\nprint(nrow(unique(u2data[,c('showID')])))\n```\n\n## U2 shows throughout the year\n\nLet's see what months of the year the members of U2 prefer to play their shows. The Top 3 months are November, October and May. January seems to be either too cold, or after the holiday season some start-up time is needed. In August they tend the take a well-deserved vacation.\n\n```{r visual exploration - months, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# get monthly counts\nmonth_counts <- count_shows_by_month(u2data)\n\n# Extract the months into a vector\nmonths <- as.character(month_counts$month)\n\n# plot number of shows by month\nggplot(data=month_counts, aes(x=month, y=count)) +\n  geom_bar(stat=\"identity\", fill=\"steelblue\")+\n  geom_text(aes(label=count), vjust=1.6, color=\"white\", position = position_dodge(0.9), size=3.5)+\n  scale_x_discrete(limits = months)+\n  ggtitle(\"U2 shows throughout the year\")+\n  theme(plot.title = element_text(hjust = 0.5))+\n  xlab(\"Month\") + ylab(\"Number of shows\")\n\n# check that month counts of shows counts match the number of unique shows in the data\nprint(sum(month_counts$count))\nprint(nrow(unique(u2data[,c('showID')])))\n```\n\n## U2 shows over the decades\n\nThe 80s was definitely the decade where U2 was most active with regards to touring!\n\n```{r visual exploration - decades, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# get decade counts\ndecade_counts <- count_shows_by_decade(u2data)\n\n# Extract the decades into a vector\ndecades <- as.character(decade_counts$decade)\n\n# plot number of shows by decade\nggplot(data=decade_counts, aes(x=decade, y=count)) +\n  geom_bar(stat=\"identity\", fill=\"steelblue\")+\n  geom_text(aes(label=count), vjust=1.6, color=\"white\", position = position_dodge(0.9), size=3.5)+\n  scale_x_discrete(limits = decades)+\n  ggtitle(\"U2 shows over the decades\")+\n  theme(plot.title = element_text(hjust = 0.5))+\n  xlab(\"Decade\") + ylab(\"Number of shows\")\n\n# check that decade counts of shows counts match the number of unique shows in the data\nprint(sum(decade_counts$count))\nprint(nrow(unique(u2data[,c('showID')])))\n```\n\n## Opening and Closing songs\n\nZoo Station and 40 win by far as opening and closing songs, respectively. Interesting anecdote, when I asked my wife what was the top opening song she was convinced it was Vertigo as she remembered that almost all Vertigo Tour shows opened with that song. When we inspected the different legs of that tour we saw that it was not Vertigo but City of Blinding Lights that mostly opened. Of course, the memory is biased towards the shows that we attended. That's why it was good to have the data at hand to show the overall picture. Note: snippets were excluded from this analysis.\n\nThe first table below shows the top 3 opening songs for each tour, while the second table below shows the top opening song all time, for each year since 1976. Note that in some of these years there were no tours but a perhaps a few small shows or TV appearances. To come back to the Vertigo example, in that second table you can see that City of Blinding Lights opened 86 shows of the Vertigo Tour while Vertigo opened 36 shows.\n\n```{r data analysis - opening and closing songs, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# load libraries\nlibrary(ggplot2)\n\n# Get top 10 opening songs \nopening_songs <- find_most_played_opening_songs(u2data, n = 10)\n\n# Visualize opening songs\nggplot(opening_songs, aes(x = reorder(song_title, times_played), y = times_played)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Most Common U2 Opening Songs\",\n       x = \"Song\",\n       y = \"Number of Times Used as Opener\") +\n  theme(axis.text.y = element_text(size = 10))\n\n# Get top 10 closing songs\nclosing_songs <- find_most_played_closing_songs(u2data, n = 10)\n\n# Visualize closing songs\nggplot(closing_songs, aes(x = reorder(song_title, times_played), y = times_played)) +\n  geom_bar(stat = \"identity\", fill = \"indianred\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Most Common U2 Closing Songs\",\n       x = \"Song\",\n       y = \"Number of Times Used as Closer\") +\n  theme(axis.text.y = element_text(size = 10))\n\n# Get top 3 opening songs per tour \ntop_3_openers_by_tour <- find_most_played_opening_songs_by_tour(u2data, top_n = 3)\n# Print results\nhead(top_3_openers_by_tour, n = nrow(top_3_openers_by_tour))\n\n# get top opening song by year\nopening_timeline <- find_most_played_opening_song_by_year(u2data)\nhead(opening_timeline, n = nrow(opening_timeline))\n\n\n```\n\n## Set-list variability across tours\n\nHere are two examples of a U2 set-list, from the Innocence + Experience Tour (2015) and the Joshua Tree Tour (2017), both in Amsterdam. These set-lists are actually used by the band during the show and the crew members give them to the fans after the show, sometimes.\\\n![U2 Innocence + Experience Tour, 9 September 2015, Amsterdam](u2hvl/IMG_3851.JPG \"U2 Innocence + Experience Tour, 9 September 2015, Amsterdam\"){width=\"300\"}![U2 Joshua Tree Tour 2017, 30 July 2017, Amsterdam](u2hvl/20170730_231317.jpg \"U2 Joshua Tree Tour 2017, 30 July 2017, Amsterdam\"){width=\"295\"}\n\n### Data preparation for set-list variability analysis\n\nNow we get to one of the main objectives of this project: how variable, or fixed, are the U2 set-lists? Let's start with data preparation and calculations before we create several plots.\n\n```{r data analysis - setlist variability - prepare the data, message=FALSE, warning=FALSE, error=FALSE}\n\n# read the u2 concertData\nu2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')\n\n# List of tours to exclude as this analysis focuses on the regular tours done after a U2 album release.\nexcluded_tours <- c(\n   \"U2 Stories of Surrender Tour\",\n   \"U2 Songs Of Experience Promo Tour\",\n   \"U2 Songs Of Innocence Promo Tour\",\n   \"U2 No Line On The Horizon Promo Tour\",\n   \"U2 How To Dismantle An Atomic Bomb Promo Tour\",\n   \"U2 All That You Can't Leave Behind Promo Tour\",\n   \"U2 Conspiracy Of Hope\",\n   \"U2 11 O'Clock Tick Tock Tour\",\n   \"U2 Early Days\",\n   \"U2 Various Dates\"\n)\n\n```\n\n### Average number of songs per show\n\nIn the early days the U2 concerts were much shorter, for example after the launch of their first album 'Boy' the average numbers of songs played at their concerts was about 10. In more recent tours the number is somewhere between 22 and 25. As mentioned on the [Basic Statistics U2 Concerts page](basic-stats-u2-concerts.qmd#longest-set-lists), I was lucky to have attended of the longest shows ever: 27 songs played.\n\n```{r data analysis - setlist variability - number of songs per show, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n  \n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Average Songs per Show\nggplot(tour_stats, aes(x = tour, y = avg_songs_per_show)) +\n  geom_col(fill = \"blue\") +\n  geom_text(aes(label = round(avg_songs_per_show, 1)), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Average Number of Songs per Show\",\n       x = \"Tour\",\n       y = \"Average Number of Songs\")\n\n```\n\n### Number of shows per tour\n\nThe longest tour with most shows ever was the ZOO TV Tour in 1992-1993. That tour consisted of 5 legs and a total of 156 shows. That was the first tour when I saw U2 live, below a picture I took at the front rail in Nijmegen on August 3, 1993.\n\n![U2 ZOO TV - Zooropa Tour, 3 Aug 1993, Nijmegen, The Netherlands](u2hvl/F694A384-BA53-4A39-B0B6-887121947E84.JPG \"U2 ZOO TV - Zooropa Tour, 3 Aug 1993, Nijmegen, The Netherlands\"){fig-align=\"left\" width=\"527\"}\n\nIf you want to see a visual of the number of shows per tour aspect, layered on the world map, you can check out the [U2 Tour Map](interactive-visual-apps.qmd#world-map-with-interactive-tour-and-song-filter-using-shiny) Shiny app that I developed as part of this project.\n\n```{r data analysis - setlist variability - number of shows per tour, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Number of Shows per Tour\nggplot(tour_stats, aes(x = tour, y = total_shows)) +\n  geom_col(fill = \"red\") +\n  geom_text(aes(label = total_shows), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Number of Shows per Tour\",\n       x = \"Tour\",\n       y = \"Number of Shows\")\n```\n\n### Number of unique songs per tour\n\nThe more unique songs U2 plays during a tour the better for the fans who go to many shows. Like this we hope to hear the songs they do not play that often. For example, when we were in Honolulu, Hawaii, for the last show of the Vertigo Tour, they played 'Rockin' in the Free World', together with Pearl Jam. That was a big party, or as Bono said: *'A tribal gathering of the faithful, celebrity love island, beach party'* 😁 🏖️ See my [summary/compilation video](https://www.youtube.com/watch?v=64eC8sRPlMA) on YouTube.\n\n![U2 Vertigo Tour, December 9, 2006, Honolulu](u2hvl/DSCN1518.JPG \"U2 Vertigo Tour, December 9, 2006, Honolulu\"){fig-align=\"left\" width=\"534\"}\n\nIf we look at the graph we see that the 360° Tour had most unique songs played. There seems to be a correlation with the number of shows in the tour, but more about that further down.\n\n```{r data analysis - setlist variability - number of songs per tour, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Unique Songs per Tour\nggplot(tour_stats, aes(x = tour, y = total_unique_songs)) +\n  geom_col(fill = \"purple\") +\n  geom_text(aes(label = total_unique_songs), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Number Unique Songs per Tour\",\n       x = \"Tour\",\n       y = \"Number of Unique Songs\")\n```\n\n### Number of unique snippets per tour\n\nSnippets are short pieces of songs that are mixed into a regular song performance. These snippets can be from U2 songs or from any other artist. A well-know and loved snippet among U2 fans is 'Shine like stars' which is sometimes played at the end of 'With or without You\", for example here in [this Joshua Tree concert in 1987](https://youtu.be/IUiOIG-n1vc?feature=shared&t=365). In the graph we see that the 360° Tour did not only have the most number of unique songs, but also the most number of unique snippets.\n\n```{r data analysis - setlist variability - number of snippets per tour, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Unique Snippets per Tour\nggplot(tour_stats, aes(x = tour, y = total_unique_snippets)) +\n  geom_col(fill = \"orange\") +\n  geom_text(aes(label = total_unique_snippets), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Number of Unique Snippets per Tour\",\n       x = \"Tour\",\n       y = \"Number of Unique Snippets\")\n```\n\n### Correlation between number of shows and number of songs/snippets\n\nIn the correlation plot below we see a moderate positive correlation between the number shows played during a tour and the number of unique songs and snippets played during a tour. About 21% (0.462² = 0.213) of the variation in unique songs can be explained by the number of shows, and about 16% (0.398² = 0.158) of the variation in unique snippets can be explained by the number of shows. Thus, there is a pattern, but it's not very strong - having more shows somewhat predicts having more unique songs and more unique snippets performed.\n\n```{r data analysis - setlist variability - correlation sows - songs/snippets, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required packages\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Analyze correlation between number of shows and unique songs / snippets\ntour_correlation_data <- calculate_tour_correlation_data(tour_stats)\n\n# Calculate correlations\ncorrelations <- summarise(\n  tour_stats,\n  songs_correlation = cor(total_shows, total_unique_songs),\n  snippets_correlation = cor(total_shows, total_unique_snippets)\n)\n\n# Create plot\nggplot(tour_correlation_data, \n       aes(x = total_shows, y = unique_count)) +\n  geom_point(aes(color = tour), size = 3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"blue\") +\n  facet_wrap(~ metric_type, scales = \"free_y\") +\n  theme_minimal() +\n  labs(\n    title = \"Correlation: Number of Shows vs Unique Songs/Snippets\",\n    x = \"Number of Shows\",\n    y = \"Number of Unique Songs/Snippets\"\n  ) +\n  theme(legend.position = \"right\") +\n  geom_text(data = data.frame(\n    metric_type = \"Unique Songs\",\n    x = Inf,\n    y = Inf,\n    label = sprintf(\"Correlation: %.3f\", correlations$songs_correlation)\n  ), aes(x = x, y = y, label = label),\n  hjust = 1, vjust = 1, size = 3, inherit.aes = FALSE) +\n  geom_text(data = data.frame(\n    metric_type = \"Unique Snippets\",\n    x = Inf,\n    y = Inf,\n    label = sprintf(\"Correlation: %.3f\", correlations$snippets_correlation)\n  ), aes(x = x, y = y, label = label),\n  hjust = 1, vjust = 1, size = 3, inherit.aes = FALSE)\n```\n\n### Distribution of song frequencies by tour\n\nThe plot below gives a visual indication of how often songs are played within a tour.\n\n```{r data analysis - setlist variability - distribution song frequencies, message=FALSE, warning=FALSE, error=FALSE}\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n# remove snippets\ndata_no_snippets <- concertData_remove_snippets(data_inc_snippets)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Calculate song frequency across tours\nsong_frequency <- calculate_song_frequency_across_tours(data_no_snippets, tour_stats, tour_order)\n\n\n# Song Frequency Distribution\nggplot(song_frequency, aes(x = song_frequency, y = tour)) +\n  geom_boxplot(outlier.shape = NA, fill = \"lightgrey\") +\n  geom_jitter(aes(color = tour), height = 0.2, alpha = 0.4) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_text(size = 8)\n  ) +\n  labs(title = \"Distribution of Song Frequencies by Tour\",\n       subtitle = \"How often are different songs played within each tour?\",\n       caption = \"Box shows 25th-75th percentiles, bold line is median\\nPoints show individual songs, shifted left/right by frequency\\nWider spread indicates more variation in how often songs are played\",\n       x = \"Song Frequency (Proportion of shows that a song is played)\",\n       y = \"Tour\")\n```\n\n### Overall set-list variability by tour\n\nIn this analysis one overall variability score was calculated for each tour based on the variability of the set-lists in all the shows of that tour. The values were normalized with the tour having the highest set-list variability getting a score of 1.0. As we can see that is the 360° Tour, which also had the highest number of unique songs and snippets played. The Joshua Tree Tour 2017-2019 scored the lowest. This can partly be explained by the fact that U2 started playing those shows by playing the full Joshua Tree album with the songs always in the order as on the original album.\n\n```{r data analysis - overall variability - distribution song frequencies, message=FALSE, warning=FALSE, error=FALSE}\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n# remove snippets\ndata_no_snippets <- concertData_remove_snippets(data_inc_snippets)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Create a normalized version of overall_variability (0-1 scale)\n# and add to tour_stats data in new data frame\nmax_overall_var <- max(tour_stats$overall_variability)\ntour_stats_extended <- mutate(tour_stats, \n                               normalized_variability = overall_variability / max_overall_var)\n\n# plot overall variability of tours, with normalized values\nggplot(tour_stats_extended, aes(x = tour)) +\n  # Bar for normalized variability\n  geom_col(aes(y = normalized_variability), fill = \"darkgreen\", alpha = 0.5) +\n  # Bar outline for actual variability\n  geom_col(aes(y = overall_variability / max_overall_var), fill = NA) +\n  # Add labels for both actual and normalized values\n  geom_text(aes(y = normalized_variability,\n                label = sprintf(\"%.2f\", normalized_variability)),\n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Overall Setlist Variability by Tour\",\n       subtitle = \"Higher values mean more variability in the setlists of that tour\",\n       x = \"Tour\",\n       y = \"Variability Score\") +\n  coord_cartesian(ylim = c(0, 1.1))  # Set y-axis limit with some padding for labels\n```\n\n### Set-list variability heatmap\n\nBesides the overall variability score by tour, we can see in the analysis and plot below the variability across the set-list song positions within a tour. Here we can indeed see the block of conserved songs at the start of the Joshua Tree Tour 2017-2019 shows. But we see similar conserved blocks in other tours, for example the ZOO TV Tour, Innocence + Experience Tour, and the latest U2:UV Achtung Baby Live shows in the Sphere, Las Vegas.\n\nThis plot gives a very nice picture of the set-list variability within and across tours, a topic very often discussed by U2 fans as I mentioned on the [Asking the Right Questions](ask-the-right-questions.qmd) page of this report. Now with the data in hand and this visualization it is possible to have a more objective view.\n\n```{r data analysis - setlist variability - overall set-list variability, message=FALSE, warning=FALSE, error=FALSE}\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n# remove snippets\ndata_no_snippets <- concertData_remove_snippets(data_inc_snippets)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Create a normalized version of overall_variability (0-1 scale)\n# and add to tour_stats data in new data frame\nmax_overall_var <- max(tour_stats$overall_variability)\ntour_stats_extended <- mutate(tour_stats, \n                               normalized_variability = overall_variability / max_overall_var)\n\n# Calculate max songs for each tour\nmax_songs_by_tour <- longest_setlist_by_tour(data_no_snippets)\n  \n# Analyze Song Positions in Setlists\nposition_analysis <- analyze_song_positions(data_no_snippets, max_songs_by_tour, tour_order)\n\n# plot graph\nggplot() +\n  geom_tile(data = position_analysis,\n            aes(x = position_bin, y = tour, fill = variability)) +\n  geom_text(data = tour_stats_extended,\n            aes(x = max(position_analysis$position_bin),\n                y = tour, \n                label = sprintf(\"%.2f\", normalized_variability)),\n            size = 2,\n            color = \"black\",\n            hjust = -0.2) +\n  scale_fill_gradient(low = \"red\", high = \"blue\") +\n  scale_x_continuous(\n    breaks = seq(1, max(position_analysis$position_bin), by = 2),\n    labels = seq(1, max(position_analysis$position_bin), by = 2)\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 6)\n  ) +\n  labs(title = \"Setlist Variability by Tour\",\n       subtitle = \"How predictable is each song position across different shows?\",\n       caption = paste(\"Colors indicate variability: Red = highly predictable, Blue = highly variable\\n\",\n                      \"Text annotations show normalized tour variability (unique songs / avg songs per show)\"),\n       x = \"Song Position in Show\",\n       y = \"Tour\",\n       fill = \"Variability\\n(0-1 scale)\")\n```\n\n\n## World maps of U2 concerts locations\n\n### Data pre-processing for world maps\n\n```{r visual exploration - generate data for worldmaps, message=FALSE, warning=FALSE, error=TRUE}\n\n# read the u2 concertData\nu2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')\n\n# get unique shows from concert data fram\nunique_shows <- extract_unique_shows(u2data)\n# Process unique locations\nunique_locations <- get_concert_locations(unique_shows)\n\n# Initialize geocoded_cities\ngeocoded_cities <- NULL\n# File path for geocoded cities\ngeocoded_file_path <- \"u2data/geocoded_cities.csv\"\n# Check if file with geocodes exists and read it if it does\n# If file does not exist yet lookup the geocode for each location\n# and write to file for future use (avoiding time consuming geocode lookup)\ngeocoded_cities <- geocode_cities(geocoded_file_path, unique_locations)\n\n# Create frequency counts for cities \ncity_frequency <- create_city_frequency(unique_shows, geocoded_cities)\n\n# transform city counts and use bins\n# for example cities with 1 sow, 2-5 shows, 6-10 shows, 11-25 shows,\n# 26-50 shows, 51-100 shows, or cities with 100+ shows\nbreaks <- c(0, 1, 5, 10, 25, 50, 100, Inf)\ncity_frequency_transformed <- transform_city_frequency(city_frequency, breaks)\n\n# Create decade-based frequency \ncity_by_decade <- create_decade_frequency(unique_shows, geocoded_cities)\n\n# Create validation report \nvalidation <- tryCatch({\n  list(\n    total_shows = n_distinct(u2data$showID),\n    processed_shows = nrow(unique_shows),  \n    unique_cities = n_distinct(u2data$city),\n    unique_countries = n_distinct(u2data$country),\n    unique_tours = n_distinct(u2data$tour),\n    cities_with_coords = sum(!is.na(geocoded_cities$lat)),\n    total_song_performances = nrow(u2data),\n    shows_missing_setlist = sum(is.na(u2data$song_title)),\n    total_shows_in_frequency = sum(city_frequency$show_count)  \n  )\n}, error = function(e) {\n  stop(paste(\"Error creating validation report:\", e$message))\n})\n\n# Print validation report with additional checks\nprint(\"Data Validation Report:\")\nprint(validation)\n# Additional validation checks\nif (validation$total_shows != validation$processed_shows) {\n  warning(sprintf(\"Mismatch in show counts: %d total vs %d processed\", \n                  validation$total_shows, validation$processed_shows))\n}\nif (validation$total_shows != validation$total_shows_in_frequency) {\n  warning(sprintf(\"Mismatch in frequency counts: %d total vs %d in frequency table\", \n                  validation$total_shows, validation$total_shows_in_frequency))\n}\n\n```\n\n### World map using log scale and intensity\n\n```{r visual exploration - world map, message=FALSE, warning=FALSE, out.width=\"100%\" }\n# Using a log scale for the size/color intensity\n\n# libraries\nlibrary(ggplot2)\nlibrary(maps)\n\n# create map\nworld_map <- map_data(\"world\")\n\n# Create date range string for subtitle\ndate_range <- paste(\n  format(min(city_frequency_transformed$first_show), \"%B %Y\"),\n  \"to\",\n  format(max(city_frequency_transformed$last_show), \"%B %Y\")\n)\n\n# create plot\nworld_map <- ggplot() +\n  # Base world map\n  geom_polygon(data = world_map, \n               aes(x = long, y = lat, group = group),\n               fill = \"lightgray\", color = \"white\") +\n  # Add points for each city\n  geom_point(data = city_frequency_transformed,\n             aes(x = long, y = lat, \n                 size = show_category,\n                 color = show_category),\n             alpha = 0.7) +\n  # Customize the appearance\n  scale_size_discrete(range = c(2, 8)) +\n  scale_color_brewer(palette = \"YlOrRd\") +\n  guides(\n    color = guide_legend(\n      title = \"Number of Shows\",\n      override.aes = list(size = c(2, 3, 4, 5, 6, 7, 8))  # Make legend dots increase in size\n    ),\n    size = \"none\"  # Hide separate size legend\n  ) +\n  theme_minimal() +\n  labs(title = \"U2 Concert Locations Worldwide\",\n       subtitle = date_range,\n       x = \"Longitude\",\n       y = \"Latitude\") +\n  theme(legend.position = \"right\") +\n  # Adjust the map proportions\n  coord_fixed(1.3)\n\n# print plot\nprint(world_map)\n\n```\n\n### World map by decades\n\n```{r visual exploration - world map by decades, message=FALSE, warning=FALSE, out.width=\"100%\" }\n# Create decade-based maps\n\n# Libraries\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(RColorBrewer)\n\n# Create world map base\nworld_map <- map_data(\"world\")\n\n# Create visualization\ndecades_plot <- ggplot(data = city_by_decade) +\n  geom_polygon(data = world_map, \n               aes(x = long, y = lat, group = group),\n               fill = \"lightgray\", color = \"white\") +\n  geom_point(aes(x = long, y = lat, \n                 size = show_count,\n                 color = show_count),\n             alpha = 0.7) +\n  scale_size_continuous(name = \"Number of shows\",\n                       range = c(2, 8)) +\n  scale_color_gradientn(name = \"Number of shows\",\n                       colors = brewer.pal(9, \"YlOrRd\")) + \n  facet_wrap(~decade) +\n  theme_minimal() +\n  labs(title = \"U2 Concert Locations by Decade\",\n       x = \"Longitude\",\n       y = \"Latitude\") +\n  guides(color = guide_legend(order = 1),\n         size = guide_legend(order = 1)) +\n  theme(legend.position = \"right\",\n        legend.box = \"horizontal\") +\n  coord_fixed(1.3, \n             xlim = c(-180, 180),\n             ylim = c(-60, 90))\n\nprint(decades_plot)\n```\n\n### World map with zoom and popups using leaflet\n\n```{r visual exploration - zoomable world map, message=FALSE, warning=FALSE}\n\n# load libraries\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(viridis)\n\n# Prepare the popup content\ncity_frequency_transformed <- city_frequency_transformed %>%\n  mutate(\n    popup_content = sprintf(\n      '<div class=\"popup-content\">\n                <h3>%s, %s</h3>\n                <table>\n                  <tr><td><b>Shows:</b></td><td>%d</td></tr>\n                  <tr><td><b>First show:</b></td><td>%s</td></tr>\n                  <tr><td><b>Last show:</b></td><td>%s</td></tr>\n                  <tr><td><b>Venues:</b></td><td>%s</td></tr>\n                  <tr><td><b>Tours:</b></td><td>%s</td></tr>\n                </table>\n        </div>',\n      city, country, show_count, first_show, last_show,\n      sapply(venues, function(x) paste(x, collapse = \", \")),\n      sapply(tours, function(x) paste(x, collapse = \", \"))\n    )\n  )\n\n# Create binned color scale matching the Shiny app\nbins <- c(1, 3, 5, 10, 20, 50, Inf)\ncity_palette <- colorBin(\"viridis\", domain = city_frequency_transformed$show_count, \n                        bins = bins, right = FALSE)\n\n# Create interactive map\nleaflet(city_frequency_transformed, width=\"100%\") %>%\n  # Add different base map options \n  addProviderTiles(providers$CartoDB.Positron, group = \"Light\") %>%\n  addProviderTiles(providers$CartoDB.DarkMatter, group = \"Dark\") %>%\n  addProviderTiles(providers$Esri.WorldImagery, group = \"Satellite\") %>%\n  \n  # Set default \n  setView(lng = 0, lat = 20, zoom = 2) %>%\n  \n  # Add circles for cities with enhanced visibility\n  addCircleMarkers(\n    ~long, ~lat,\n    radius = ~pmax(5, log_shows * 3),  # Matching the min radius of 5 from Shiny app\n    popup = ~popup_content,\n    label = ~sprintf(\"%s: %d shows\", city, show_count),  # Matching the label format\n    labelOptions = labelOptions(textsize = \"12px\"),\n    color = ~city_palette(show_count),\n    fillOpacity = 0.7,\n    stroke = TRUE,\n    weight = 1,\n    opacity = 0.8\n  ) %>%\n  \n  # Add layer control with Light as default\n  addLayersControl(\n    baseGroups = c(\"Light\", \"Dark\", \"Satellite\"),\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  \n  # Add legend \n  addLegend(\n    position = \"bottomright\",\n    pal = city_palette,\n    values = ~show_count,\n    title = \"Number of Shows\",\n    opacity = 0.7,\n    labFormat = labelFormat(digits = 0)\n  )\n```\n","srcMarkdownNoYaml":"\n\nGoing beyond the basic statistics and comparison with the u2gigs.com statistics, I explored the data in a more visual manner.\n\n## Load custom concertData package\n\nFirst we load my custom concertData package where I organized all the functions to analyze the U2 concert data. This R package is available on my GitHub page at: https://github.com/vanleeuwen-hans.\n\n```{r load custom concertData package, message = FALSE, warning = FALSE}\ndevtools::load_all(\"../packages/concertData\")\nlibrary(concertData)\n```\n\nLoad the u2data file.\n\n```{r visual exploration - load libraries, message = FALSE, warning = FALSE}\n\n# read the u2 concertData\nu2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')\n```\n\n## U2 shows throughout the week\n\nLet's see what days of the week the members of U2 prefer to play their shows. Saturday and Friday are the ones.\n\n```{r visual exploration - week days, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# get weekday counts\nweekday_count <- count_shows_by_weekday(u2data)\n\n# Extract the weekdays into a vector\nweekdays <- as.character(weekday_count$weekday)\n\n# plot data\nlibrary(ggplot2)\nggplot(data=weekday_count, aes(x=weekday, y=count)) +\n  geom_bar(stat=\"identity\", fill=\"steelblue\")+\n  geom_text(aes(label=count), vjust=1.6, color=\"white\", position = position_dodge(0.9), size=3.5)+\n  scale_x_discrete(limits = weekdays)+\n  ggtitle(\"U2 shows throughout the week\")+\n  theme(plot.title = element_text(hjust = 0.5))+\n  xlab(\"Day of the week\") + ylab(\"Number of shows\")\n\n# check that weekday counts of shows counts match the number of unique shows in the data\nprint(sum(weekday_count$count))\nprint(nrow(unique(u2data[,c('showID')])))\n```\n\n## U2 shows throughout the year\n\nLet's see what months of the year the members of U2 prefer to play their shows. The Top 3 months are November, October and May. January seems to be either too cold, or after the holiday season some start-up time is needed. In August they tend the take a well-deserved vacation.\n\n```{r visual exploration - months, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# get monthly counts\nmonth_counts <- count_shows_by_month(u2data)\n\n# Extract the months into a vector\nmonths <- as.character(month_counts$month)\n\n# plot number of shows by month\nggplot(data=month_counts, aes(x=month, y=count)) +\n  geom_bar(stat=\"identity\", fill=\"steelblue\")+\n  geom_text(aes(label=count), vjust=1.6, color=\"white\", position = position_dodge(0.9), size=3.5)+\n  scale_x_discrete(limits = months)+\n  ggtitle(\"U2 shows throughout the year\")+\n  theme(plot.title = element_text(hjust = 0.5))+\n  xlab(\"Month\") + ylab(\"Number of shows\")\n\n# check that month counts of shows counts match the number of unique shows in the data\nprint(sum(month_counts$count))\nprint(nrow(unique(u2data[,c('showID')])))\n```\n\n## U2 shows over the decades\n\nThe 80s was definitely the decade where U2 was most active with regards to touring!\n\n```{r visual exploration - decades, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# get decade counts\ndecade_counts <- count_shows_by_decade(u2data)\n\n# Extract the decades into a vector\ndecades <- as.character(decade_counts$decade)\n\n# plot number of shows by decade\nggplot(data=decade_counts, aes(x=decade, y=count)) +\n  geom_bar(stat=\"identity\", fill=\"steelblue\")+\n  geom_text(aes(label=count), vjust=1.6, color=\"white\", position = position_dodge(0.9), size=3.5)+\n  scale_x_discrete(limits = decades)+\n  ggtitle(\"U2 shows over the decades\")+\n  theme(plot.title = element_text(hjust = 0.5))+\n  xlab(\"Decade\") + ylab(\"Number of shows\")\n\n# check that decade counts of shows counts match the number of unique shows in the data\nprint(sum(decade_counts$count))\nprint(nrow(unique(u2data[,c('showID')])))\n```\n\n## Opening and Closing songs\n\nZoo Station and 40 win by far as opening and closing songs, respectively. Interesting anecdote, when I asked my wife what was the top opening song she was convinced it was Vertigo as she remembered that almost all Vertigo Tour shows opened with that song. When we inspected the different legs of that tour we saw that it was not Vertigo but City of Blinding Lights that mostly opened. Of course, the memory is biased towards the shows that we attended. That's why it was good to have the data at hand to show the overall picture. Note: snippets were excluded from this analysis.\n\nThe first table below shows the top 3 opening songs for each tour, while the second table below shows the top opening song all time, for each year since 1976. Note that in some of these years there were no tours but a perhaps a few small shows or TV appearances. To come back to the Vertigo example, in that second table you can see that City of Blinding Lights opened 86 shows of the Vertigo Tour while Vertigo opened 36 shows.\n\n```{r data analysis - opening and closing songs, message=FALSE, warning=FALSE, out.width=\"100%\" }\n\n# load libraries\nlibrary(ggplot2)\n\n# Get top 10 opening songs \nopening_songs <- find_most_played_opening_songs(u2data, n = 10)\n\n# Visualize opening songs\nggplot(opening_songs, aes(x = reorder(song_title, times_played), y = times_played)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Most Common U2 Opening Songs\",\n       x = \"Song\",\n       y = \"Number of Times Used as Opener\") +\n  theme(axis.text.y = element_text(size = 10))\n\n# Get top 10 closing songs\nclosing_songs <- find_most_played_closing_songs(u2data, n = 10)\n\n# Visualize closing songs\nggplot(closing_songs, aes(x = reorder(song_title, times_played), y = times_played)) +\n  geom_bar(stat = \"identity\", fill = \"indianred\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Most Common U2 Closing Songs\",\n       x = \"Song\",\n       y = \"Number of Times Used as Closer\") +\n  theme(axis.text.y = element_text(size = 10))\n\n# Get top 3 opening songs per tour \ntop_3_openers_by_tour <- find_most_played_opening_songs_by_tour(u2data, top_n = 3)\n# Print results\nhead(top_3_openers_by_tour, n = nrow(top_3_openers_by_tour))\n\n# get top opening song by year\nopening_timeline <- find_most_played_opening_song_by_year(u2data)\nhead(opening_timeline, n = nrow(opening_timeline))\n\n\n```\n\n## Set-list variability across tours\n\nHere are two examples of a U2 set-list, from the Innocence + Experience Tour (2015) and the Joshua Tree Tour (2017), both in Amsterdam. These set-lists are actually used by the band during the show and the crew members give them to the fans after the show, sometimes.\\\n![U2 Innocence + Experience Tour, 9 September 2015, Amsterdam](u2hvl/IMG_3851.JPG \"U2 Innocence + Experience Tour, 9 September 2015, Amsterdam\"){width=\"300\"}![U2 Joshua Tree Tour 2017, 30 July 2017, Amsterdam](u2hvl/20170730_231317.jpg \"U2 Joshua Tree Tour 2017, 30 July 2017, Amsterdam\"){width=\"295\"}\n\n### Data preparation for set-list variability analysis\n\nNow we get to one of the main objectives of this project: how variable, or fixed, are the U2 set-lists? Let's start with data preparation and calculations before we create several plots.\n\n```{r data analysis - setlist variability - prepare the data, message=FALSE, warning=FALSE, error=FALSE}\n\n# read the u2 concertData\nu2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')\n\n# List of tours to exclude as this analysis focuses on the regular tours done after a U2 album release.\nexcluded_tours <- c(\n   \"U2 Stories of Surrender Tour\",\n   \"U2 Songs Of Experience Promo Tour\",\n   \"U2 Songs Of Innocence Promo Tour\",\n   \"U2 No Line On The Horizon Promo Tour\",\n   \"U2 How To Dismantle An Atomic Bomb Promo Tour\",\n   \"U2 All That You Can't Leave Behind Promo Tour\",\n   \"U2 Conspiracy Of Hope\",\n   \"U2 11 O'Clock Tick Tock Tour\",\n   \"U2 Early Days\",\n   \"U2 Various Dates\"\n)\n\n```\n\n### Average number of songs per show\n\nIn the early days the U2 concerts were much shorter, for example after the launch of their first album 'Boy' the average numbers of songs played at their concerts was about 10. In more recent tours the number is somewhere between 22 and 25. As mentioned on the [Basic Statistics U2 Concerts page](basic-stats-u2-concerts.qmd#longest-set-lists), I was lucky to have attended of the longest shows ever: 27 songs played.\n\n```{r data analysis - setlist variability - number of songs per show, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n  \n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Average Songs per Show\nggplot(tour_stats, aes(x = tour, y = avg_songs_per_show)) +\n  geom_col(fill = \"blue\") +\n  geom_text(aes(label = round(avg_songs_per_show, 1)), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Average Number of Songs per Show\",\n       x = \"Tour\",\n       y = \"Average Number of Songs\")\n\n```\n\n### Number of shows per tour\n\nThe longest tour with most shows ever was the ZOO TV Tour in 1992-1993. That tour consisted of 5 legs and a total of 156 shows. That was the first tour when I saw U2 live, below a picture I took at the front rail in Nijmegen on August 3, 1993.\n\n![U2 ZOO TV - Zooropa Tour, 3 Aug 1993, Nijmegen, The Netherlands](u2hvl/F694A384-BA53-4A39-B0B6-887121947E84.JPG \"U2 ZOO TV - Zooropa Tour, 3 Aug 1993, Nijmegen, The Netherlands\"){fig-align=\"left\" width=\"527\"}\n\nIf you want to see a visual of the number of shows per tour aspect, layered on the world map, you can check out the [U2 Tour Map](interactive-visual-apps.qmd#world-map-with-interactive-tour-and-song-filter-using-shiny) Shiny app that I developed as part of this project.\n\n```{r data analysis - setlist variability - number of shows per tour, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Number of Shows per Tour\nggplot(tour_stats, aes(x = tour, y = total_shows)) +\n  geom_col(fill = \"red\") +\n  geom_text(aes(label = total_shows), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Number of Shows per Tour\",\n       x = \"Tour\",\n       y = \"Number of Shows\")\n```\n\n### Number of unique songs per tour\n\nThe more unique songs U2 plays during a tour the better for the fans who go to many shows. Like this we hope to hear the songs they do not play that often. For example, when we were in Honolulu, Hawaii, for the last show of the Vertigo Tour, they played 'Rockin' in the Free World', together with Pearl Jam. That was a big party, or as Bono said: *'A tribal gathering of the faithful, celebrity love island, beach party'* 😁 🏖️ See my [summary/compilation video](https://www.youtube.com/watch?v=64eC8sRPlMA) on YouTube.\n\n![U2 Vertigo Tour, December 9, 2006, Honolulu](u2hvl/DSCN1518.JPG \"U2 Vertigo Tour, December 9, 2006, Honolulu\"){fig-align=\"left\" width=\"534\"}\n\nIf we look at the graph we see that the 360° Tour had most unique songs played. There seems to be a correlation with the number of shows in the tour, but more about that further down.\n\n```{r data analysis - setlist variability - number of songs per tour, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Unique Songs per Tour\nggplot(tour_stats, aes(x = tour, y = total_unique_songs)) +\n  geom_col(fill = \"purple\") +\n  geom_text(aes(label = total_unique_songs), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Number Unique Songs per Tour\",\n       x = \"Tour\",\n       y = \"Number of Unique Songs\")\n```\n\n### Number of unique snippets per tour\n\nSnippets are short pieces of songs that are mixed into a regular song performance. These snippets can be from U2 songs or from any other artist. A well-know and loved snippet among U2 fans is 'Shine like stars' which is sometimes played at the end of 'With or without You\", for example here in [this Joshua Tree concert in 1987](https://youtu.be/IUiOIG-n1vc?feature=shared&t=365). In the graph we see that the 360° Tour did not only have the most number of unique songs, but also the most number of unique snippets.\n\n```{r data analysis - setlist variability - number of snippets per tour, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required package\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Unique Snippets per Tour\nggplot(tour_stats, aes(x = tour, y = total_unique_snippets)) +\n  geom_col(fill = \"orange\") +\n  geom_text(aes(label = total_unique_snippets), \n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Number of Unique Snippets per Tour\",\n       x = \"Tour\",\n       y = \"Number of Unique Snippets\")\n```\n\n### Correlation between number of shows and number of songs/snippets\n\nIn the correlation plot below we see a moderate positive correlation between the number shows played during a tour and the number of unique songs and snippets played during a tour. About 21% (0.462² = 0.213) of the variation in unique songs can be explained by the number of shows, and about 16% (0.398² = 0.158) of the variation in unique snippets can be explained by the number of shows. Thus, there is a pattern, but it's not very strong - having more shows somewhat predicts having more unique songs and more unique snippets performed.\n\n```{r data analysis - setlist variability - correlation sows - songs/snippets, message=FALSE, warning=FALSE, error=FALSE}\n\n# get required packages\nlibrary(ggplot2)\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_inc_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Analyze correlation between number of shows and unique songs / snippets\ntour_correlation_data <- calculate_tour_correlation_data(tour_stats)\n\n# Calculate correlations\ncorrelations <- summarise(\n  tour_stats,\n  songs_correlation = cor(total_shows, total_unique_songs),\n  snippets_correlation = cor(total_shows, total_unique_snippets)\n)\n\n# Create plot\nggplot(tour_correlation_data, \n       aes(x = total_shows, y = unique_count)) +\n  geom_point(aes(color = tour), size = 3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"blue\") +\n  facet_wrap(~ metric_type, scales = \"free_y\") +\n  theme_minimal() +\n  labs(\n    title = \"Correlation: Number of Shows vs Unique Songs/Snippets\",\n    x = \"Number of Shows\",\n    y = \"Number of Unique Songs/Snippets\"\n  ) +\n  theme(legend.position = \"right\") +\n  geom_text(data = data.frame(\n    metric_type = \"Unique Songs\",\n    x = Inf,\n    y = Inf,\n    label = sprintf(\"Correlation: %.3f\", correlations$songs_correlation)\n  ), aes(x = x, y = y, label = label),\n  hjust = 1, vjust = 1, size = 3, inherit.aes = FALSE) +\n  geom_text(data = data.frame(\n    metric_type = \"Unique Snippets\",\n    x = Inf,\n    y = Inf,\n    label = sprintf(\"Correlation: %.3f\", correlations$snippets_correlation)\n  ), aes(x = x, y = y, label = label),\n  hjust = 1, vjust = 1, size = 3, inherit.aes = FALSE)\n```\n\n### Distribution of song frequencies by tour\n\nThe plot below gives a visual indication of how often songs are played within a tour.\n\n```{r data analysis - setlist variability - distribution song frequencies, message=FALSE, warning=FALSE, error=FALSE}\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n# remove snippets\ndata_no_snippets <- concertData_remove_snippets(data_inc_snippets)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Calculate song frequency across tours\nsong_frequency <- calculate_song_frequency_across_tours(data_no_snippets, tour_stats, tour_order)\n\n\n# Song Frequency Distribution\nggplot(song_frequency, aes(x = song_frequency, y = tour)) +\n  geom_boxplot(outlier.shape = NA, fill = \"lightgrey\") +\n  geom_jitter(aes(color = tour), height = 0.2, alpha = 0.4) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_text(size = 8)\n  ) +\n  labs(title = \"Distribution of Song Frequencies by Tour\",\n       subtitle = \"How often are different songs played within each tour?\",\n       caption = \"Box shows 25th-75th percentiles, bold line is median\\nPoints show individual songs, shifted left/right by frequency\\nWider spread indicates more variation in how often songs are played\",\n       x = \"Song Frequency (Proportion of shows that a song is played)\",\n       y = \"Tour\")\n```\n\n### Overall set-list variability by tour\n\nIn this analysis one overall variability score was calculated for each tour based on the variability of the set-lists in all the shows of that tour. The values were normalized with the tour having the highest set-list variability getting a score of 1.0. As we can see that is the 360° Tour, which also had the highest number of unique songs and snippets played. The Joshua Tree Tour 2017-2019 scored the lowest. This can partly be explained by the fact that U2 started playing those shows by playing the full Joshua Tree album with the songs always in the order as on the original album.\n\n```{r data analysis - overall variability - distribution song frequencies, message=FALSE, warning=FALSE, error=FALSE}\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n# remove snippets\ndata_no_snippets <- concertData_remove_snippets(data_inc_snippets)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Create a normalized version of overall_variability (0-1 scale)\n# and add to tour_stats data in new data frame\nmax_overall_var <- max(tour_stats$overall_variability)\ntour_stats_extended <- mutate(tour_stats, \n                               normalized_variability = overall_variability / max_overall_var)\n\n# plot overall variability of tours, with normalized values\nggplot(tour_stats_extended, aes(x = tour)) +\n  # Bar for normalized variability\n  geom_col(aes(y = normalized_variability), fill = \"darkgreen\", alpha = 0.5) +\n  # Bar outline for actual variability\n  geom_col(aes(y = overall_variability / max_overall_var), fill = NA) +\n  # Add labels for both actual and normalized values\n  geom_text(aes(y = normalized_variability,\n                label = sprintf(\"%.2f\", normalized_variability)),\n            vjust = 2, size = 3) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Overall Setlist Variability by Tour\",\n       subtitle = \"Higher values mean more variability in the setlists of that tour\",\n       x = \"Tour\",\n       y = \"Variability Score\") +\n  coord_cartesian(ylim = c(0, 1.1))  # Set y-axis limit with some padding for labels\n```\n\n### Set-list variability heatmap\n\nBesides the overall variability score by tour, we can see in the analysis and plot below the variability across the set-list song positions within a tour. Here we can indeed see the block of conserved songs at the start of the Joshua Tree Tour 2017-2019 shows. But we see similar conserved blocks in other tours, for example the ZOO TV Tour, Innocence + Experience Tour, and the latest U2:UV Achtung Baby Live shows in the Sphere, Las Vegas.\n\nThis plot gives a very nice picture of the set-list variability within and across tours, a topic very often discussed by U2 fans as I mentioned on the [Asking the Right Questions](ask-the-right-questions.qmd) page of this report. Now with the data in hand and this visualization it is possible to have a more objective view.\n\n```{r data analysis - setlist variability - overall set-list variability, message=FALSE, warning=FALSE, error=FALSE}\n\n# create data frame without excluded tours\ndata_selected_tours <- concertData_remove_tours(u2data, excluded_tours)\n# remove shows without setlist\ndata_inc_snippets <- concertData_remove_showsNoSetlist(data_selected_tours)\n# remove snippets\ndata_no_snippets <- concertData_remove_snippets(data_inc_snippets)\n\n# Get tours ordered chronologically\ntour_order <- tour_order_by_date(data_no_snippets, ascending = FALSE)\n\n# Calculate tour-level statistics\ntour_stats <- calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order)\n\n# Create a normalized version of overall_variability (0-1 scale)\n# and add to tour_stats data in new data frame\nmax_overall_var <- max(tour_stats$overall_variability)\ntour_stats_extended <- mutate(tour_stats, \n                               normalized_variability = overall_variability / max_overall_var)\n\n# Calculate max songs for each tour\nmax_songs_by_tour <- longest_setlist_by_tour(data_no_snippets)\n  \n# Analyze Song Positions in Setlists\nposition_analysis <- analyze_song_positions(data_no_snippets, max_songs_by_tour, tour_order)\n\n# plot graph\nggplot() +\n  geom_tile(data = position_analysis,\n            aes(x = position_bin, y = tour, fill = variability)) +\n  geom_text(data = tour_stats_extended,\n            aes(x = max(position_analysis$position_bin),\n                y = tour, \n                label = sprintf(\"%.2f\", normalized_variability)),\n            size = 2,\n            color = \"black\",\n            hjust = -0.2) +\n  scale_fill_gradient(low = \"red\", high = \"blue\") +\n  scale_x_continuous(\n    breaks = seq(1, max(position_analysis$position_bin), by = 2),\n    labels = seq(1, max(position_analysis$position_bin), by = 2)\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(size = 6)\n  ) +\n  labs(title = \"Setlist Variability by Tour\",\n       subtitle = \"How predictable is each song position across different shows?\",\n       caption = paste(\"Colors indicate variability: Red = highly predictable, Blue = highly variable\\n\",\n                      \"Text annotations show normalized tour variability (unique songs / avg songs per show)\"),\n       x = \"Song Position in Show\",\n       y = \"Tour\",\n       fill = \"Variability\\n(0-1 scale)\")\n```\n\n\n## World maps of U2 concerts locations\n\n### Data pre-processing for world maps\n\n```{r visual exploration - generate data for worldmaps, message=FALSE, warning=FALSE, error=TRUE}\n\n# read the u2 concertData\nu2data <- read_concertData_csv('u2data/u2data_all_shows_clean_final.csv')\n\n# get unique shows from concert data fram\nunique_shows <- extract_unique_shows(u2data)\n# Process unique locations\nunique_locations <- get_concert_locations(unique_shows)\n\n# Initialize geocoded_cities\ngeocoded_cities <- NULL\n# File path for geocoded cities\ngeocoded_file_path <- \"u2data/geocoded_cities.csv\"\n# Check if file with geocodes exists and read it if it does\n# If file does not exist yet lookup the geocode for each location\n# and write to file for future use (avoiding time consuming geocode lookup)\ngeocoded_cities <- geocode_cities(geocoded_file_path, unique_locations)\n\n# Create frequency counts for cities \ncity_frequency <- create_city_frequency(unique_shows, geocoded_cities)\n\n# transform city counts and use bins\n# for example cities with 1 sow, 2-5 shows, 6-10 shows, 11-25 shows,\n# 26-50 shows, 51-100 shows, or cities with 100+ shows\nbreaks <- c(0, 1, 5, 10, 25, 50, 100, Inf)\ncity_frequency_transformed <- transform_city_frequency(city_frequency, breaks)\n\n# Create decade-based frequency \ncity_by_decade <- create_decade_frequency(unique_shows, geocoded_cities)\n\n# Create validation report \nvalidation <- tryCatch({\n  list(\n    total_shows = n_distinct(u2data$showID),\n    processed_shows = nrow(unique_shows),  \n    unique_cities = n_distinct(u2data$city),\n    unique_countries = n_distinct(u2data$country),\n    unique_tours = n_distinct(u2data$tour),\n    cities_with_coords = sum(!is.na(geocoded_cities$lat)),\n    total_song_performances = nrow(u2data),\n    shows_missing_setlist = sum(is.na(u2data$song_title)),\n    total_shows_in_frequency = sum(city_frequency$show_count)  \n  )\n}, error = function(e) {\n  stop(paste(\"Error creating validation report:\", e$message))\n})\n\n# Print validation report with additional checks\nprint(\"Data Validation Report:\")\nprint(validation)\n# Additional validation checks\nif (validation$total_shows != validation$processed_shows) {\n  warning(sprintf(\"Mismatch in show counts: %d total vs %d processed\", \n                  validation$total_shows, validation$processed_shows))\n}\nif (validation$total_shows != validation$total_shows_in_frequency) {\n  warning(sprintf(\"Mismatch in frequency counts: %d total vs %d in frequency table\", \n                  validation$total_shows, validation$total_shows_in_frequency))\n}\n\n```\n\n### World map using log scale and intensity\n\n```{r visual exploration - world map, message=FALSE, warning=FALSE, out.width=\"100%\" }\n# Using a log scale for the size/color intensity\n\n# libraries\nlibrary(ggplot2)\nlibrary(maps)\n\n# create map\nworld_map <- map_data(\"world\")\n\n# Create date range string for subtitle\ndate_range <- paste(\n  format(min(city_frequency_transformed$first_show), \"%B %Y\"),\n  \"to\",\n  format(max(city_frequency_transformed$last_show), \"%B %Y\")\n)\n\n# create plot\nworld_map <- ggplot() +\n  # Base world map\n  geom_polygon(data = world_map, \n               aes(x = long, y = lat, group = group),\n               fill = \"lightgray\", color = \"white\") +\n  # Add points for each city\n  geom_point(data = city_frequency_transformed,\n             aes(x = long, y = lat, \n                 size = show_category,\n                 color = show_category),\n             alpha = 0.7) +\n  # Customize the appearance\n  scale_size_discrete(range = c(2, 8)) +\n  scale_color_brewer(palette = \"YlOrRd\") +\n  guides(\n    color = guide_legend(\n      title = \"Number of Shows\",\n      override.aes = list(size = c(2, 3, 4, 5, 6, 7, 8))  # Make legend dots increase in size\n    ),\n    size = \"none\"  # Hide separate size legend\n  ) +\n  theme_minimal() +\n  labs(title = \"U2 Concert Locations Worldwide\",\n       subtitle = date_range,\n       x = \"Longitude\",\n       y = \"Latitude\") +\n  theme(legend.position = \"right\") +\n  # Adjust the map proportions\n  coord_fixed(1.3)\n\n# print plot\nprint(world_map)\n\n```\n\n### World map by decades\n\n```{r visual exploration - world map by decades, message=FALSE, warning=FALSE, out.width=\"100%\" }\n# Create decade-based maps\n\n# Libraries\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(RColorBrewer)\n\n# Create world map base\nworld_map <- map_data(\"world\")\n\n# Create visualization\ndecades_plot <- ggplot(data = city_by_decade) +\n  geom_polygon(data = world_map, \n               aes(x = long, y = lat, group = group),\n               fill = \"lightgray\", color = \"white\") +\n  geom_point(aes(x = long, y = lat, \n                 size = show_count,\n                 color = show_count),\n             alpha = 0.7) +\n  scale_size_continuous(name = \"Number of shows\",\n                       range = c(2, 8)) +\n  scale_color_gradientn(name = \"Number of shows\",\n                       colors = brewer.pal(9, \"YlOrRd\")) + \n  facet_wrap(~decade) +\n  theme_minimal() +\n  labs(title = \"U2 Concert Locations by Decade\",\n       x = \"Longitude\",\n       y = \"Latitude\") +\n  guides(color = guide_legend(order = 1),\n         size = guide_legend(order = 1)) +\n  theme(legend.position = \"right\",\n        legend.box = \"horizontal\") +\n  coord_fixed(1.3, \n             xlim = c(-180, 180),\n             ylim = c(-60, 90))\n\nprint(decades_plot)\n```\n\n### World map with zoom and popups using leaflet\n\n```{r visual exploration - zoomable world map, message=FALSE, warning=FALSE}\n\n# load libraries\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(viridis)\n\n# Prepare the popup content\ncity_frequency_transformed <- city_frequency_transformed %>%\n  mutate(\n    popup_content = sprintf(\n      '<div class=\"popup-content\">\n                <h3>%s, %s</h3>\n                <table>\n                  <tr><td><b>Shows:</b></td><td>%d</td></tr>\n                  <tr><td><b>First show:</b></td><td>%s</td></tr>\n                  <tr><td><b>Last show:</b></td><td>%s</td></tr>\n                  <tr><td><b>Venues:</b></td><td>%s</td></tr>\n                  <tr><td><b>Tours:</b></td><td>%s</td></tr>\n                </table>\n        </div>',\n      city, country, show_count, first_show, last_show,\n      sapply(venues, function(x) paste(x, collapse = \", \")),\n      sapply(tours, function(x) paste(x, collapse = \", \"))\n    )\n  )\n\n# Create binned color scale matching the Shiny app\nbins <- c(1, 3, 5, 10, 20, 50, Inf)\ncity_palette <- colorBin(\"viridis\", domain = city_frequency_transformed$show_count, \n                        bins = bins, right = FALSE)\n\n# Create interactive map\nleaflet(city_frequency_transformed, width=\"100%\") %>%\n  # Add different base map options \n  addProviderTiles(providers$CartoDB.Positron, group = \"Light\") %>%\n  addProviderTiles(providers$CartoDB.DarkMatter, group = \"Dark\") %>%\n  addProviderTiles(providers$Esri.WorldImagery, group = \"Satellite\") %>%\n  \n  # Set default \n  setView(lng = 0, lat = 20, zoom = 2) %>%\n  \n  # Add circles for cities with enhanced visibility\n  addCircleMarkers(\n    ~long, ~lat,\n    radius = ~pmax(5, log_shows * 3),  # Matching the min radius of 5 from Shiny app\n    popup = ~popup_content,\n    label = ~sprintf(\"%s: %d shows\", city, show_count),  # Matching the label format\n    labelOptions = labelOptions(textsize = \"12px\"),\n    color = ~city_palette(show_count),\n    fillOpacity = 0.7,\n    stroke = TRUE,\n    weight = 1,\n    opacity = 0.8\n  ) %>%\n  \n  # Add layer control with Light as default\n  addLayersControl(\n    baseGroups = c(\"Light\", \"Dark\", \"Satellite\"),\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  \n  # Add legend \n  addLegend(\n    position = \"bottomright\",\n    pal = city_palette,\n    values = ~show_count,\n    title = \"Number of Shows\",\n    opacity = 0.7,\n    labFormat = labelFormat(digits = 0)\n  )\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"visual-exploration-of-the-data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.32","theme":"cosmo","title":"Visual Exploration","author":"Hans van Leeuwen","bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}