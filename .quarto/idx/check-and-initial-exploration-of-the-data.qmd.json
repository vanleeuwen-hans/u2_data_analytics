{"title":"Initial Data Exploration","markdown":{"yaml":{"title":"Initial Data Exploration","author":"Hans van Leeuwen"},"headingText":"Comparing my data and numbers with u2gigs.com","containsRefs":false,"markdown":"\n\n\nI performed an initial data exploration, comparing some numbers with the tour statistics listed on the u2gigs.com site page: <https://www.u2gigs.com/tourdb-stats.html>. Remember, that is the source of my data.\n\n```{r initial data exploration, message = FALSE, warning = FALSE}\n\n# load required libraries\nlibrary(dplyr)\nlibrary(readr)\n\n# read file\nu2data <- read_csv(\"u2data/archive/u2data_all_shows_clean.csv\")\n```\n\n```{r number countries, message = FALSE, warning = FALSE}\n# number of countries where U2 played shows\ncat(\"Number of countries: \", nrow(unique(u2data[,c('country')])), \"\\n\")\n```\n\nThe number at u2gigs.com (October 2024) is 49 (<https://www.u2gigs.com/all-countries.html>). We see here that in my data there is 1 country less compared to what is listed at u2gigs.com. Now let's check the number of different songs played over all shows.\n\n```{r number songs, message = FALSE, warning = FALSE}\n# number of different songs played by U2 at the shows\ncat(\"Number of songs played at the shows: \", nrow(unique(u2data[,c('song_title')])), \"\\n\")\n```\n\nThe number at u2gigs.com (October 2024) is 994 (<https://www.u2gigs.com/most-played-songs.html>). We see here that in my data there is 1 song less compared to what is listed at u2gigs.com. Now let's check number of shows played in some cities.\n\n```{r number shows per city, message = FALSE, warning = FALSE}\n# cities with most shows played (only top 5 plus Amsterdam)\naggregate(data=u2data,  showID ~ city, subset = city %in% c('Dublin', 'New York', 'London', 'Las Vegas', 'Los Angeles', 'Amsterdam'),  function(x) length(unique(x))) %>%\n  arrange(.,desc(showID))\n```\n\nWhen we compare that with u2gigs.com (Oct 2024 screen shot below) we see that the numbers are not the same.\n\n![Number of shows per city - source U2gigs.com - October 2024.](u2gigs/u2_top_played_cities-u2gigscom.png)\n\nLet's dive into the Amsterdam shows where my data contains 19 and u2gigs.com lists 23.\n\n```{r shows in Amsterdam, message = FALSE, warning = FALSE}\n# shows done in Amsterdam venues\namsterdam_data <- subset(u2data, city == 'Amsterdam', select = c(\"showID\",\"city\",\"venue\", \"tour\"))\naggregate(data=amsterdam_data, showID ~ tour + venue, function(x) length(unique(x))) %>%\n  arrange(.,desc(tour))\n```\n\nThe u2gigs.com info:\n\n![Shows in Amsterdam - source U2gigs.com - October 2024.](u2gigs/U2_shows_Amsterdam-u2gigscom.png)\n\nThe 4 shows that are missing in my data are:\n\n-   1981-02-11: Unknown Bar - Amsterdam, Netherlands\n-   1981-02-11: Paradiso - Amsterdam, Netherlands\n-   1989-12-19: Rai Europa Hal - Amsterdam, Netherlands\n-   1989-12-20: Rai Europa Hal - Amsterdam, Netherlands\n\nChecking these on u2gigs.com, we see that these are all shows that do not have a set list (no played songs listed), while all the other 19 Amsterdam shows do have a set list. Confirming that these are missing from my data:\n\n```{r missing shows in Amsterdam, message = FALSE, warning = FALSE}\n# check Amsterdam shows that were missing before\nmissing_Amsterdam_shows <- subset(u2data, date == '1981-02-11' | date == '1989-12-19' | date == '1989-12-20', select = c(\"date\",\"venue\"))\nprint(missing_Amsterdam_shows)\n```\n\nI concluded that the shows without set lists had not been stored by my scraping code. Indeed, when I went back to check my scraping code I saw where the issue was. Thus, I adapted the code to retrieve those 297 shows without set list, and then added them to the final data file:\n\nFirst create new file with header:\n\n``` bash\nhead -n 1 u2data_all_shows_clean.csv > u2data_all_shows_clean_final.csv\n```\n\nThen concatenate content from 3 data files into the new file (skipping headers):\n\n``` bash\ntail -n +2 -q u2data_all_shows_clean.csv >> u2data_all_shows_clean_final.csv \ntail -n +2 -q u2analytics_data_nosetlistshows-dates.csv >> u2data_all_shows_clean_final.csv\n```\n\n## Confirm data after adding the shows without setlist\n\nAfter adding the shows without set list I loaded and explored the data again.\n\n```{r read data after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# load required libraries\nlibrary(dplyr)\nlibrary(readr)\n\n# read data\n# note: file name was changed after an issue with city names was detected\nu2data <- read_csv('u2data/archive/u2data_all_shows_clean_final_incorrect_cities.csv')\n```\n\n```{r number countries after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# number of countries where U2 played shows\ncat(\"Number of countries: \", nrow(unique(u2data[,c('country')])), \"\\n\")\n```\n\nRemember, from earlier, that the number of countries listed at u2gigs.com is 49. So, this is now correct in my data. Now let's look at the number of different songs played again.\n\n```{r number songs after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# number of different songs played by U2 at the shows\ncat(\"Number of songs played at the shows: \", nrow(unique(u2data[,c('song_title')])), \"\\n\")\n```\n\nThe number at u2gigs.com (October 2024) is 994 (<https://www.u2gigs.com/most-played-songs.html>), which is the same as in my data.\n\n```{r number shows per city after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# cities with most shows played (only top 5 plus Amsterdam)\naggregate(data=u2data,  showID ~ city, subset = city %in% c('Dublin', 'New York', 'London', 'Las Vegas', 'Los Angeles', 'Amsterdam'),  function(x) length(unique(x))) %>%\n  arrange(.,desc(showID))\n```\n\nThis still does not fully coincide with the u2gigs.com statistics:\n\n![Number of shows per city - source U2gigs.com - October 2024.](u2gigs/u2_top_played_cities-u2gigscom.png)\n\nI'll look at that in a bit but first let's check the Amsterdam shows again.\n\n```{r shows in Amsterdam after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# shows done in Amsterdam venues\namsterdam_data <- subset(u2data, city == 'Amsterdam', select = c(\"showID\",\"city\",\"venue\", \"tour\"))\naggregate(data=amsterdam_data, showID ~ tour + venue, function(x) length(unique(x))) %>%\n  arrange(.,desc(tour))\n```\n\nThe 4 shows that were missing earlier now do appear in my data.\n\n```{r missing shows in Amsterdam after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# check Amsterdam shows that were missing before\nmissing_Amsterdam_shows <- subset(u2data, date == '1981-02-11' | date == '1989-12-19' | date == '1989-12-20', select = c(\"date\", \"venue\"))\nprint(missing_Amsterdam_shows)\n```\n\n## Fixing incorrect city and venue names\n\nAs mentioned, the number of shows in some cities did not match the number listed at u2gigs.com. I explored this by obtaining a list of all cities listed at u2gigs.com (<https://www.u2gigs.com/all-locations-city.html>), and by getting a list of unique city names in my data:\n\n```{r checking cities, message = FALSE, warning = FALSE}\n\n# get and print unique cities\nprint(unique(u2data[,c('city')]))\n```\n\nI took the list of cities from both sources in Excel and identified the different city entries. I observed 5 strange city entries in my data:\n\n-   arne\n-   elin\n-   enis\n-   losters\n-   rent\n\nI then retrieved more info about these entries in my data, including the showID so that I could manually check these shows at u2gigs.com.\n\n```{r checking cities continued, message = FALSE, warning = FALSE}\n# check cities not listed at u2gigs.com\n\nextra_cities <- subset(u2data, city == 'arne' | city == 'elin' | city == 'enis' | city == 'losters' | city == 'rent', select = c(\"showID\", \"country\", \"city\", \"date\",\"venue\"))\nprint(extra_cities)\n```\n\nI concluded that the following correct city names corresponded to these entries:\n\n-   arne -\\> Nogent-sur-Marne\n-   elin -\\> Vaulx-en-Velin\n-   enis -\\> Saint-Denis\n-   losters -\\> Davos-Klosters\n-   rent -\\> Stoke-on-Trent\n\nAll these issues were caused by a flaw in the scraping code when using a regular expression to separate the venue from the city. The issue occurred either when dashes '-' were present in the city name or in the venue name.\n\nI corrected this with the following commands in the data file:\n\n``` bash\n# Step 1: change \"Pavillon Baltard - Nogent-su\",\"arne\" to \"Pavillon Baltard\",\"Nogent-sur-Marne\"\n# first check pattern\ngrep '\\\"Pavillon Baltard - Nogent-su\\\",\\\"arne\\\"' u2data_all_shows_clean_final.csv | wc -l\n      12\n# now replace\nawk '{gsub(/\\\"Pavillon Baltard - Nogent-su\\\",\\\"arne\\\"/,\"\\\"Pavillon Baltard\\\",\\\"Nogent-sur-Marne\\\"\")}1' u2data_all_shows_clean_final.csv > u2data_all_shows_clean_final2.csv\n# check result\ngrep '\\\"Pavillon Baltard - Nogent-su\\\",\\\"arne\\\"' u2data_all_shows_clean_final2.csv | wc -l\n       0\ngrep '\\\"Pavillon Baltard\\\",\\\"Nogent-sur-Marne\\\"' u2data_all_shows_clean_final2.csv | wc -l\n      12\n\n\n# Step 2: change \"Ecole Nationale des Travaux Publics - Vaulx-e\",\"elin\" to \"Ecole Nationale des Travaux Public\",\"Vaulx-en-Velin\"\n# first check pattern\ngrep '\\\"Ecole Nationale des Travaux Publics - Vaulx-e\\\",\\\"elin\\\"' u2data_all_shows_clean_final2.csv | wc -l\n      1\n# now replace\nawk '{gsub(/\\\"Ecole Nationale des Travaux Publics - Vaulx-e\\\",\\\"elin\\\"/,\"\\\"Ecole Nationale des Travaux Publics\\\",\\\"Vaulx-en-Velin\\\"\")}1' u2data_all_shows_clean_final2.csv > u2data_all_shows_clean_final3.csv\n# check result\ngrep '\\\"Ecole Nationale des Travaux Publics - Vaulx-e\\\",\\\"elin\\\"' u2data_all_shows_clean_final3.csv | wc -l\n      0\ngrep '\\\"Ecole Nationale des Travaux Publics\\\",\\\"Vaulx-en-Velin\\\"' u2data_all_shows_clean_final3.csv | wc -l\n      1\n\n# Step 3: change \"Stade de France - Sain\",\"enis\" to \"Stade de France\",\"Saint-Denis\"\n# first check pattern\ngrep '\\\"Stade de France - Sain\\\",\\\"enis\\\"' u2data_all_shows_clean_final3.csv | wc -l\n      232\n# now replace\nawk '{gsub(/\\\"Stade de France - Sain\\\",\\\"enis\\\"/,\"\\\"Stade de France\\\",\\\"Saint-Denis\\\"\")}1' u2data_all_shows_clean_final3.csv > u2data_all_shows_clean_final4.csv\n# check result\ngrep '\\\"Stade de France - Sain\\\",\\\"enis\\\"' u2data_all_shows_clean_final4.csv | wc -l\n      0\ngrep '\\\"Stade de France\",\"Saint-Denis\\\"' u2data_all_shows_clean_final4.csv | wc -l\n      1\n\n# Step 4: change \"World Economic Forum - Davo\",\"losters\" to \"World Economic Forum\",\"Davos-Klosters\"\n# first check pattern\ngrep '\\\"World Economic Forum - Davo\\\",\\\"losters\\\"' u2data_all_shows_clean_final4.csv | wc -l\n      1\n# now replace\nawk '{gsub(/\\\"World Economic Forum - Davo\\\",\\\"losters\\\"/,\"\\\"World Economic Forum\\\",\\\"Davos-Klosters\\\"\")}1' u2data_all_shows_clean_final4.csv > u2data_all_shows_clean_final5.csv\n# check result\ngrep '\\\"World Economic Forum - Davo\\\",\\\"losters\\\"' u2data_all_shows_clean_final5.csv | wc -l\n      0\ngrep '\\\"World Economic Forum\",\"Davos-Klosters\\\"' u2data_all_shows_clean_final5.csv | wc -l\n      1 \n\n\n# Step 5: change \"King's Hall - Stoke-o\",\"rent\" to \"King's Hall\",\"Stoke-on-Trent\"\n# first check pattern\ngrep \"\\\"King\\'s Hall - Stoke-o\\\",\\\"rent\\\"\" u2data_all_shows_clean_final5.csv | wc -l\n      1\n# now replace \n# note that \\047 is used to match the single quote\nawk '{gsub(/\\\"King\\047s Hall - Stoke-o\\\",\\\"rent\\\"/,\"\\\"King\\047s Hal\\\",\\\"Stoke-on-Trent\\\"\")}1' u2data_all_shows_clean_final5.csv > u2data_all_shows_clean_final6.csv\n# check result\ngrep \"\\\"King\\'s Hall - Stoke-o\\\",\\\"rent\\\"\" u2data_all_shows_clean_final6.csv | wc -l | wc -l\n      0\ngrep \"\\\"King's Hal\\\",\\\"Stoke-on-Trent\\\"\" u2data_all_shows_clean_final6.csv | wc -l\n      1 \n\n# file house keeping\nmv u2data_all_shows_clean_final.csv archive/u2data_all_shows_clean_final_incorrect_cities.csv\nmv u2data_all_shows_clean_final2.csv archive/u2data_all_shows_clean_final2.csv\nmv u2data_all_shows_clean_final3.csv archive/u2data_all_shows_clean_final3.csv\nmv u2data_all_shows_clean_final4.csv archive/u2data_all_shows_clean_final4.csv\nmv u2data_all_shows_clean_final5.csv archive/u2data_all_shows_clean_final5.csv\nmv u2data_all_shows_clean_final6.csv u2data_all_shows_clean_final.csv\n```\n\n## Fixing additional issues in the song_lyrics field\n\nLoading the file with read_csv() still produced some error messages in the song_lyrics field. In the affected lines I observed three potential issues: ;\", \";, \". This was fixed as follows:\n\n``` bash\n# Step 1: fix \";\ngrep '\";' u2data_all_shows_clean_final.csv | wc -l\n       8\nawk '{gsub(/\\\";/,\"\")}1' u2data_all_shows_clean_final.csv > u2data_all_shows_clean_final7.csv\ngrep '\";' u2data_all_shows_clean_final7.csv | wc -l\n       0\n\n# Step 2: fix ;\"\ngrep ';\"' u2data_all_shows_clean_final.csv | wc -l\n       8\nawk '{gsub(/;\\\"/,\"\")}1' u2data_all_shows_clean_final7.csv > u2data_all_shows_clean_final8.csv\ngrep ';\"' u2data_all_shows_clean_final8.csv | wc -l\n       0\n\n\n# Step 3: fix \\\"\ngrep '\\\\\"' u2data_all_shows_clean_final.csv | wc -l\n      30\nawk '{gsub(/\\\\\"/,\"\\\"\")}1' u2data_all_shows_clean_final8.csv > u2data_all_shows_clean_final9.csv\ngrep '\\\\\"' u2data_all_shows_clean_final9.csv | wc -l\n       0\n# file house keeping       \nmv u2data_all_shows_clean_final.csv archive/u2data_all_shows_clean_final_incorrect_cities_more_issues.csv\nmv u2data_all_shows_clean_final7.csv archive/u2data_all_shows_clean_final7.csv\nmv u2data_all_shows_clean_final8.csv archive/u2data_all_shows_clean_final8.csv\nmv u2data_all_shows_clean_final9.csv u2data_all_shows_clean_final.csv\n```\n\n## Final data loading of fixed data\n\nNow the fixed data file was loaded in R with read_CSV() successfully:\n\n```{r read data after fixing city/venue names}\n\n# load required libraries\nlibrary(dplyr)\nlibrary(readr)\n\n# read file\n# normally the following file would be read\n# however after this \"final\" file was loaded one more issue was detected\n# this issue is referred to as the 'Rosemont duplication issue'\n# this is explained on the 'Basic Statistics U2 Concerts' page of this report\n# u2data <- read_csv('u2data/u2data_all_shows_clean_final.csv')\n\n# for the sake of the rmarkdown report \n# read the following file where the Rosemont duplication was not fixed yet\nu2data <- read_csv('u2data/archive/u2data_all_shows_clean_final_rosemontdup.csv')\n# see the structure of the data frame\nstr(u2data)\n```\n\n------------------------------------------------------------------------\n","srcMarkdownNoYaml":"\n\n## Comparing my data and numbers with u2gigs.com\n\nI performed an initial data exploration, comparing some numbers with the tour statistics listed on the u2gigs.com site page: <https://www.u2gigs.com/tourdb-stats.html>. Remember, that is the source of my data.\n\n```{r initial data exploration, message = FALSE, warning = FALSE}\n\n# load required libraries\nlibrary(dplyr)\nlibrary(readr)\n\n# read file\nu2data <- read_csv(\"u2data/archive/u2data_all_shows_clean.csv\")\n```\n\n```{r number countries, message = FALSE, warning = FALSE}\n# number of countries where U2 played shows\ncat(\"Number of countries: \", nrow(unique(u2data[,c('country')])), \"\\n\")\n```\n\nThe number at u2gigs.com (October 2024) is 49 (<https://www.u2gigs.com/all-countries.html>). We see here that in my data there is 1 country less compared to what is listed at u2gigs.com. Now let's check the number of different songs played over all shows.\n\n```{r number songs, message = FALSE, warning = FALSE}\n# number of different songs played by U2 at the shows\ncat(\"Number of songs played at the shows: \", nrow(unique(u2data[,c('song_title')])), \"\\n\")\n```\n\nThe number at u2gigs.com (October 2024) is 994 (<https://www.u2gigs.com/most-played-songs.html>). We see here that in my data there is 1 song less compared to what is listed at u2gigs.com. Now let's check number of shows played in some cities.\n\n```{r number shows per city, message = FALSE, warning = FALSE}\n# cities with most shows played (only top 5 plus Amsterdam)\naggregate(data=u2data,  showID ~ city, subset = city %in% c('Dublin', 'New York', 'London', 'Las Vegas', 'Los Angeles', 'Amsterdam'),  function(x) length(unique(x))) %>%\n  arrange(.,desc(showID))\n```\n\nWhen we compare that with u2gigs.com (Oct 2024 screen shot below) we see that the numbers are not the same.\n\n![Number of shows per city - source U2gigs.com - October 2024.](u2gigs/u2_top_played_cities-u2gigscom.png)\n\nLet's dive into the Amsterdam shows where my data contains 19 and u2gigs.com lists 23.\n\n```{r shows in Amsterdam, message = FALSE, warning = FALSE}\n# shows done in Amsterdam venues\namsterdam_data <- subset(u2data, city == 'Amsterdam', select = c(\"showID\",\"city\",\"venue\", \"tour\"))\naggregate(data=amsterdam_data, showID ~ tour + venue, function(x) length(unique(x))) %>%\n  arrange(.,desc(tour))\n```\n\nThe u2gigs.com info:\n\n![Shows in Amsterdam - source U2gigs.com - October 2024.](u2gigs/U2_shows_Amsterdam-u2gigscom.png)\n\nThe 4 shows that are missing in my data are:\n\n-   1981-02-11: Unknown Bar - Amsterdam, Netherlands\n-   1981-02-11: Paradiso - Amsterdam, Netherlands\n-   1989-12-19: Rai Europa Hal - Amsterdam, Netherlands\n-   1989-12-20: Rai Europa Hal - Amsterdam, Netherlands\n\nChecking these on u2gigs.com, we see that these are all shows that do not have a set list (no played songs listed), while all the other 19 Amsterdam shows do have a set list. Confirming that these are missing from my data:\n\n```{r missing shows in Amsterdam, message = FALSE, warning = FALSE}\n# check Amsterdam shows that were missing before\nmissing_Amsterdam_shows <- subset(u2data, date == '1981-02-11' | date == '1989-12-19' | date == '1989-12-20', select = c(\"date\",\"venue\"))\nprint(missing_Amsterdam_shows)\n```\n\nI concluded that the shows without set lists had not been stored by my scraping code. Indeed, when I went back to check my scraping code I saw where the issue was. Thus, I adapted the code to retrieve those 297 shows without set list, and then added them to the final data file:\n\nFirst create new file with header:\n\n``` bash\nhead -n 1 u2data_all_shows_clean.csv > u2data_all_shows_clean_final.csv\n```\n\nThen concatenate content from 3 data files into the new file (skipping headers):\n\n``` bash\ntail -n +2 -q u2data_all_shows_clean.csv >> u2data_all_shows_clean_final.csv \ntail -n +2 -q u2analytics_data_nosetlistshows-dates.csv >> u2data_all_shows_clean_final.csv\n```\n\n## Confirm data after adding the shows without setlist\n\nAfter adding the shows without set list I loaded and explored the data again.\n\n```{r read data after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# load required libraries\nlibrary(dplyr)\nlibrary(readr)\n\n# read data\n# note: file name was changed after an issue with city names was detected\nu2data <- read_csv('u2data/archive/u2data_all_shows_clean_final_incorrect_cities.csv')\n```\n\n```{r number countries after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# number of countries where U2 played shows\ncat(\"Number of countries: \", nrow(unique(u2data[,c('country')])), \"\\n\")\n```\n\nRemember, from earlier, that the number of countries listed at u2gigs.com is 49. So, this is now correct in my data. Now let's look at the number of different songs played again.\n\n```{r number songs after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# number of different songs played by U2 at the shows\ncat(\"Number of songs played at the shows: \", nrow(unique(u2data[,c('song_title')])), \"\\n\")\n```\n\nThe number at u2gigs.com (October 2024) is 994 (<https://www.u2gigs.com/most-played-songs.html>), which is the same as in my data.\n\n```{r number shows per city after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# cities with most shows played (only top 5 plus Amsterdam)\naggregate(data=u2data,  showID ~ city, subset = city %in% c('Dublin', 'New York', 'London', 'Las Vegas', 'Los Angeles', 'Amsterdam'),  function(x) length(unique(x))) %>%\n  arrange(.,desc(showID))\n```\n\nThis still does not fully coincide with the u2gigs.com statistics:\n\n![Number of shows per city - source U2gigs.com - October 2024.](u2gigs/u2_top_played_cities-u2gigscom.png)\n\nI'll look at that in a bit but first let's check the Amsterdam shows again.\n\n```{r shows in Amsterdam after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# shows done in Amsterdam venues\namsterdam_data <- subset(u2data, city == 'Amsterdam', select = c(\"showID\",\"city\",\"venue\", \"tour\"))\naggregate(data=amsterdam_data, showID ~ tour + venue, function(x) length(unique(x))) %>%\n  arrange(.,desc(tour))\n```\n\nThe 4 shows that were missing earlier now do appear in my data.\n\n```{r missing shows in Amsterdam after adding shows without setlist, message = FALSE, warning = FALSE}\n\n# check Amsterdam shows that were missing before\nmissing_Amsterdam_shows <- subset(u2data, date == '1981-02-11' | date == '1989-12-19' | date == '1989-12-20', select = c(\"date\", \"venue\"))\nprint(missing_Amsterdam_shows)\n```\n\n## Fixing incorrect city and venue names\n\nAs mentioned, the number of shows in some cities did not match the number listed at u2gigs.com. I explored this by obtaining a list of all cities listed at u2gigs.com (<https://www.u2gigs.com/all-locations-city.html>), and by getting a list of unique city names in my data:\n\n```{r checking cities, message = FALSE, warning = FALSE}\n\n# get and print unique cities\nprint(unique(u2data[,c('city')]))\n```\n\nI took the list of cities from both sources in Excel and identified the different city entries. I observed 5 strange city entries in my data:\n\n-   arne\n-   elin\n-   enis\n-   losters\n-   rent\n\nI then retrieved more info about these entries in my data, including the showID so that I could manually check these shows at u2gigs.com.\n\n```{r checking cities continued, message = FALSE, warning = FALSE}\n# check cities not listed at u2gigs.com\n\nextra_cities <- subset(u2data, city == 'arne' | city == 'elin' | city == 'enis' | city == 'losters' | city == 'rent', select = c(\"showID\", \"country\", \"city\", \"date\",\"venue\"))\nprint(extra_cities)\n```\n\nI concluded that the following correct city names corresponded to these entries:\n\n-   arne -\\> Nogent-sur-Marne\n-   elin -\\> Vaulx-en-Velin\n-   enis -\\> Saint-Denis\n-   losters -\\> Davos-Klosters\n-   rent -\\> Stoke-on-Trent\n\nAll these issues were caused by a flaw in the scraping code when using a regular expression to separate the venue from the city. The issue occurred either when dashes '-' were present in the city name or in the venue name.\n\nI corrected this with the following commands in the data file:\n\n``` bash\n# Step 1: change \"Pavillon Baltard - Nogent-su\",\"arne\" to \"Pavillon Baltard\",\"Nogent-sur-Marne\"\n# first check pattern\ngrep '\\\"Pavillon Baltard - Nogent-su\\\",\\\"arne\\\"' u2data_all_shows_clean_final.csv | wc -l\n      12\n# now replace\nawk '{gsub(/\\\"Pavillon Baltard - Nogent-su\\\",\\\"arne\\\"/,\"\\\"Pavillon Baltard\\\",\\\"Nogent-sur-Marne\\\"\")}1' u2data_all_shows_clean_final.csv > u2data_all_shows_clean_final2.csv\n# check result\ngrep '\\\"Pavillon Baltard - Nogent-su\\\",\\\"arne\\\"' u2data_all_shows_clean_final2.csv | wc -l\n       0\ngrep '\\\"Pavillon Baltard\\\",\\\"Nogent-sur-Marne\\\"' u2data_all_shows_clean_final2.csv | wc -l\n      12\n\n\n# Step 2: change \"Ecole Nationale des Travaux Publics - Vaulx-e\",\"elin\" to \"Ecole Nationale des Travaux Public\",\"Vaulx-en-Velin\"\n# first check pattern\ngrep '\\\"Ecole Nationale des Travaux Publics - Vaulx-e\\\",\\\"elin\\\"' u2data_all_shows_clean_final2.csv | wc -l\n      1\n# now replace\nawk '{gsub(/\\\"Ecole Nationale des Travaux Publics - Vaulx-e\\\",\\\"elin\\\"/,\"\\\"Ecole Nationale des Travaux Publics\\\",\\\"Vaulx-en-Velin\\\"\")}1' u2data_all_shows_clean_final2.csv > u2data_all_shows_clean_final3.csv\n# check result\ngrep '\\\"Ecole Nationale des Travaux Publics - Vaulx-e\\\",\\\"elin\\\"' u2data_all_shows_clean_final3.csv | wc -l\n      0\ngrep '\\\"Ecole Nationale des Travaux Publics\\\",\\\"Vaulx-en-Velin\\\"' u2data_all_shows_clean_final3.csv | wc -l\n      1\n\n# Step 3: change \"Stade de France - Sain\",\"enis\" to \"Stade de France\",\"Saint-Denis\"\n# first check pattern\ngrep '\\\"Stade de France - Sain\\\",\\\"enis\\\"' u2data_all_shows_clean_final3.csv | wc -l\n      232\n# now replace\nawk '{gsub(/\\\"Stade de France - Sain\\\",\\\"enis\\\"/,\"\\\"Stade de France\\\",\\\"Saint-Denis\\\"\")}1' u2data_all_shows_clean_final3.csv > u2data_all_shows_clean_final4.csv\n# check result\ngrep '\\\"Stade de France - Sain\\\",\\\"enis\\\"' u2data_all_shows_clean_final4.csv | wc -l\n      0\ngrep '\\\"Stade de France\",\"Saint-Denis\\\"' u2data_all_shows_clean_final4.csv | wc -l\n      1\n\n# Step 4: change \"World Economic Forum - Davo\",\"losters\" to \"World Economic Forum\",\"Davos-Klosters\"\n# first check pattern\ngrep '\\\"World Economic Forum - Davo\\\",\\\"losters\\\"' u2data_all_shows_clean_final4.csv | wc -l\n      1\n# now replace\nawk '{gsub(/\\\"World Economic Forum - Davo\\\",\\\"losters\\\"/,\"\\\"World Economic Forum\\\",\\\"Davos-Klosters\\\"\")}1' u2data_all_shows_clean_final4.csv > u2data_all_shows_clean_final5.csv\n# check result\ngrep '\\\"World Economic Forum - Davo\\\",\\\"losters\\\"' u2data_all_shows_clean_final5.csv | wc -l\n      0\ngrep '\\\"World Economic Forum\",\"Davos-Klosters\\\"' u2data_all_shows_clean_final5.csv | wc -l\n      1 \n\n\n# Step 5: change \"King's Hall - Stoke-o\",\"rent\" to \"King's Hall\",\"Stoke-on-Trent\"\n# first check pattern\ngrep \"\\\"King\\'s Hall - Stoke-o\\\",\\\"rent\\\"\" u2data_all_shows_clean_final5.csv | wc -l\n      1\n# now replace \n# note that \\047 is used to match the single quote\nawk '{gsub(/\\\"King\\047s Hall - Stoke-o\\\",\\\"rent\\\"/,\"\\\"King\\047s Hal\\\",\\\"Stoke-on-Trent\\\"\")}1' u2data_all_shows_clean_final5.csv > u2data_all_shows_clean_final6.csv\n# check result\ngrep \"\\\"King\\'s Hall - Stoke-o\\\",\\\"rent\\\"\" u2data_all_shows_clean_final6.csv | wc -l | wc -l\n      0\ngrep \"\\\"King's Hal\\\",\\\"Stoke-on-Trent\\\"\" u2data_all_shows_clean_final6.csv | wc -l\n      1 \n\n# file house keeping\nmv u2data_all_shows_clean_final.csv archive/u2data_all_shows_clean_final_incorrect_cities.csv\nmv u2data_all_shows_clean_final2.csv archive/u2data_all_shows_clean_final2.csv\nmv u2data_all_shows_clean_final3.csv archive/u2data_all_shows_clean_final3.csv\nmv u2data_all_shows_clean_final4.csv archive/u2data_all_shows_clean_final4.csv\nmv u2data_all_shows_clean_final5.csv archive/u2data_all_shows_clean_final5.csv\nmv u2data_all_shows_clean_final6.csv u2data_all_shows_clean_final.csv\n```\n\n## Fixing additional issues in the song_lyrics field\n\nLoading the file with read_csv() still produced some error messages in the song_lyrics field. In the affected lines I observed three potential issues: ;\", \";, \". This was fixed as follows:\n\n``` bash\n# Step 1: fix \";\ngrep '\";' u2data_all_shows_clean_final.csv | wc -l\n       8\nawk '{gsub(/\\\";/,\"\")}1' u2data_all_shows_clean_final.csv > u2data_all_shows_clean_final7.csv\ngrep '\";' u2data_all_shows_clean_final7.csv | wc -l\n       0\n\n# Step 2: fix ;\"\ngrep ';\"' u2data_all_shows_clean_final.csv | wc -l\n       8\nawk '{gsub(/;\\\"/,\"\")}1' u2data_all_shows_clean_final7.csv > u2data_all_shows_clean_final8.csv\ngrep ';\"' u2data_all_shows_clean_final8.csv | wc -l\n       0\n\n\n# Step 3: fix \\\"\ngrep '\\\\\"' u2data_all_shows_clean_final.csv | wc -l\n      30\nawk '{gsub(/\\\\\"/,\"\\\"\")}1' u2data_all_shows_clean_final8.csv > u2data_all_shows_clean_final9.csv\ngrep '\\\\\"' u2data_all_shows_clean_final9.csv | wc -l\n       0\n# file house keeping       \nmv u2data_all_shows_clean_final.csv archive/u2data_all_shows_clean_final_incorrect_cities_more_issues.csv\nmv u2data_all_shows_clean_final7.csv archive/u2data_all_shows_clean_final7.csv\nmv u2data_all_shows_clean_final8.csv archive/u2data_all_shows_clean_final8.csv\nmv u2data_all_shows_clean_final9.csv u2data_all_shows_clean_final.csv\n```\n\n## Final data loading of fixed data\n\nNow the fixed data file was loaded in R with read_CSV() successfully:\n\n```{r read data after fixing city/venue names}\n\n# load required libraries\nlibrary(dplyr)\nlibrary(readr)\n\n# read file\n# normally the following file would be read\n# however after this \"final\" file was loaded one more issue was detected\n# this issue is referred to as the 'Rosemont duplication issue'\n# this is explained on the 'Basic Statistics U2 Concerts' page of this report\n# u2data <- read_csv('u2data/u2data_all_shows_clean_final.csv')\n\n# for the sake of the rmarkdown report \n# read the following file where the Rosemont duplication was not fixed yet\nu2data <- read_csv('u2data/archive/u2data_all_shows_clean_final_rosemontdup.csv')\n# see the structure of the data frame\nstr(u2data)\n```\n\n------------------------------------------------------------------------\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"check-and-initial-exploration-of-the-data.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.32","theme":"cosmo","title":"Initial Data Exploration","author":"Hans van Leeuwen"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}